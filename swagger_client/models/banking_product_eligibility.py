# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingProductEligibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eligibility_type': 'str',
        'additional_value': 'str',
        'additional_info': 'str',
        'additional_info_uri': 'str'
    }

    attribute_map = {
        'eligibility_type': 'eligibilityType',
        'additional_value': 'additionalValue',
        'additional_info': 'additionalInfo',
        'additional_info_uri': 'additionalInfoUri'
    }

    def __init__(self, eligibility_type=None, additional_value=None, additional_info=None, additional_info_uri=None):  # noqa: E501
        """BankingProductEligibility - a model defined in Swagger"""  # noqa: E501

        self._eligibility_type = None
        self._additional_value = None
        self._additional_info = None
        self._additional_info_uri = None
        self.discriminator = None

        self.eligibility_type = eligibility_type
        if additional_value is not None:
            self.additional_value = additional_value
        if additional_info is not None:
            self.additional_info = additional_info
        if additional_info_uri is not None:
            self.additional_info_uri = additional_info_uri

    @property
    def eligibility_type(self):
        """Gets the eligibility_type of this BankingProductEligibility.  # noqa: E501

        The type of eligibility criteria described.  See the next section for an overview of valid values and their meaning  # noqa: E501

        :return: The eligibility_type of this BankingProductEligibility.  # noqa: E501
        :rtype: str
        """
        return self._eligibility_type

    @eligibility_type.setter
    def eligibility_type(self, eligibility_type):
        """Sets the eligibility_type of this BankingProductEligibility.

        The type of eligibility criteria described.  See the next section for an overview of valid values and their meaning  # noqa: E501

        :param eligibility_type: The eligibility_type of this BankingProductEligibility.  # noqa: E501
        :type: str
        """
        if eligibility_type is None:
            raise ValueError("Invalid value for `eligibility_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BUSINESS", "PENSION_RECIPIENT", "MIN_AGE", "MAX_AGE", "MIN_INCOME", "MIN_TURNOVER", "STAFF", "STUDENT", "EMPLOYMENT_STATUS", "RESIDENCY_STATUS", "NATURAL_PERSON", "OTHER"]  # noqa: E501
        if eligibility_type not in allowed_values:
            raise ValueError(
                "Invalid value for `eligibility_type` ({0}), must be one of {1}"  # noqa: E501
                .format(eligibility_type, allowed_values)
            )

        self._eligibility_type = eligibility_type

    @property
    def additional_value(self):
        """Gets the additional_value of this BankingProductEligibility.  # noqa: E501

        Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified. Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)  # noqa: E501

        :return: The additional_value of this BankingProductEligibility.  # noqa: E501
        :rtype: str
        """
        return self._additional_value

    @additional_value.setter
    def additional_value(self, additional_value):
        """Sets the additional_value of this BankingProductEligibility.

        Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified. Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)  # noqa: E501

        :param additional_value: The additional_value of this BankingProductEligibility.  # noqa: E501
        :type: str
        """

        self._additional_value = additional_value

    @property
    def additional_info(self):
        """Gets the additional_info of this BankingProductEligibility.  # noqa: E501

        Display text providing more information on the [eligibility](#tocSproducteligibilitytypedoc) criteria. Mandatory if the field is set to OTHER  # noqa: E501

        :return: The additional_info of this BankingProductEligibility.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this BankingProductEligibility.

        Display text providing more information on the [eligibility](#tocSproducteligibilitytypedoc) criteria. Mandatory if the field is set to OTHER  # noqa: E501

        :param additional_info: The additional_info of this BankingProductEligibility.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def additional_info_uri(self):
        """Gets the additional_info_uri of this BankingProductEligibility.  # noqa: E501

        Link to a web page with more information on this eligibility criteria  # noqa: E501

        :return: The additional_info_uri of this BankingProductEligibility.  # noqa: E501
        :rtype: str
        """
        return self._additional_info_uri

    @additional_info_uri.setter
    def additional_info_uri(self, additional_info_uri):
        """Sets the additional_info_uri of this BankingProductEligibility.

        Link to a web page with more information on this eligibility criteria  # noqa: E501

        :param additional_info_uri: The additional_info_uri of this BankingProductEligibility.  # noqa: E501
        :type: str
        """

        self._additional_info_uri = additional_info_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingProductEligibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingProductEligibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
