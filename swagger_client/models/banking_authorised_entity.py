# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingAuthorisedEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'financial_institution': 'str',
        'abn': 'str',
        'acn': 'str',
        'arbn': 'str'
    }

    attribute_map = {
        'description': 'description',
        'financial_institution': 'financialInstitution',
        'abn': 'abn',
        'acn': 'acn',
        'arbn': 'arbn'
    }

    def __init__(self, description=None, financial_institution=None, abn=None, acn=None, arbn=None):  # noqa: E501
        """BankingAuthorisedEntity - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._financial_institution = None
        self._abn = None
        self._acn = None
        self._arbn = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if financial_institution is not None:
            self.financial_institution = financial_institution
        if abn is not None:
            self.abn = abn
        if acn is not None:
            self.acn = acn
        if arbn is not None:
            self.arbn = arbn

    @property
    def description(self):
        """Gets the description of this BankingAuthorisedEntity.  # noqa: E501

        Description of the authorised entity derived from previously executed direct debits  # noqa: E501

        :return: The description of this BankingAuthorisedEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankingAuthorisedEntity.

        Description of the authorised entity derived from previously executed direct debits  # noqa: E501

        :param description: The description of this BankingAuthorisedEntity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def financial_institution(self):
        """Gets the financial_institution of this BankingAuthorisedEntity.  # noqa: E501

        Name of the financial institution through which the direct debit will be executed. Is required unless the payment is made via a credit card scheme  # noqa: E501

        :return: The financial_institution of this BankingAuthorisedEntity.  # noqa: E501
        :rtype: str
        """
        return self._financial_institution

    @financial_institution.setter
    def financial_institution(self, financial_institution):
        """Sets the financial_institution of this BankingAuthorisedEntity.

        Name of the financial institution through which the direct debit will be executed. Is required unless the payment is made via a credit card scheme  # noqa: E501

        :param financial_institution: The financial_institution of this BankingAuthorisedEntity.  # noqa: E501
        :type: str
        """

        self._financial_institution = financial_institution

    @property
    def abn(self):
        """Gets the abn of this BankingAuthorisedEntity.  # noqa: E501

        Australian Business Number for the authorised entity  # noqa: E501

        :return: The abn of this BankingAuthorisedEntity.  # noqa: E501
        :rtype: str
        """
        return self._abn

    @abn.setter
    def abn(self, abn):
        """Sets the abn of this BankingAuthorisedEntity.

        Australian Business Number for the authorised entity  # noqa: E501

        :param abn: The abn of this BankingAuthorisedEntity.  # noqa: E501
        :type: str
        """

        self._abn = abn

    @property
    def acn(self):
        """Gets the acn of this BankingAuthorisedEntity.  # noqa: E501

        Australian Company Number for the authorised entity  # noqa: E501

        :return: The acn of this BankingAuthorisedEntity.  # noqa: E501
        :rtype: str
        """
        return self._acn

    @acn.setter
    def acn(self, acn):
        """Sets the acn of this BankingAuthorisedEntity.

        Australian Company Number for the authorised entity  # noqa: E501

        :param acn: The acn of this BankingAuthorisedEntity.  # noqa: E501
        :type: str
        """

        self._acn = acn

    @property
    def arbn(self):
        """Gets the arbn of this BankingAuthorisedEntity.  # noqa: E501

        Australian Registered Body Number for the authorised entity  # noqa: E501

        :return: The arbn of this BankingAuthorisedEntity.  # noqa: E501
        :rtype: str
        """
        return self._arbn

    @arbn.setter
    def arbn(self, arbn):
        """Sets the arbn of this BankingAuthorisedEntity.

        Australian Registered Body Number for the authorised entity  # noqa: E501

        :param arbn: The arbn of this BankingAuthorisedEntity.  # noqa: E501
        :type: str
        """

        self._arbn = arbn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingAuthorisedEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingAuthorisedEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
