# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingScheduledPaymentTo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to_u_type': 'str',
        'account_id': 'str',
        'payee_id': 'str',
        'domestic': 'BankingDomesticPayee',
        'biller': 'BankingBillerPayee',
        'international': 'BankingInternationalPayee'
    }

    attribute_map = {
        'to_u_type': 'toUType',
        'account_id': 'accountId',
        'payee_id': 'payeeId',
        'domestic': 'domestic',
        'biller': 'biller',
        'international': 'international'
    }

    def __init__(self, to_u_type=None, account_id=None, payee_id=None, domestic=None, biller=None, international=None):  # noqa: E501
        """BankingScheduledPaymentTo - a model defined in Swagger"""  # noqa: E501

        self._to_u_type = None
        self._account_id = None
        self._payee_id = None
        self._domestic = None
        self._biller = None
        self._international = None
        self.discriminator = None

        self.to_u_type = to_u_type
        if account_id is not None:
            self.account_id = account_id
        if payee_id is not None:
            self.payee_id = payee_id
        if domestic is not None:
            self.domestic = domestic
        if biller is not None:
            self.biller = biller
        if international is not None:
            self.international = international

    @property
    def to_u_type(self):
        """Gets the to_u_type of this BankingScheduledPaymentTo.  # noqa: E501

        The type of object provided that specifies the destination of the funds for the payment.  # noqa: E501

        :return: The to_u_type of this BankingScheduledPaymentTo.  # noqa: E501
        :rtype: str
        """
        return self._to_u_type

    @to_u_type.setter
    def to_u_type(self, to_u_type):
        """Sets the to_u_type of this BankingScheduledPaymentTo.

        The type of object provided that specifies the destination of the funds for the payment.  # noqa: E501

        :param to_u_type: The to_u_type of this BankingScheduledPaymentTo.  # noqa: E501
        :type: str
        """
        if to_u_type is None:
            raise ValueError("Invalid value for `to_u_type`, must not be `None`")  # noqa: E501
        allowed_values = ["accountId", "payeeId", "domestic", "biller", "international"]  # noqa: E501
        if to_u_type not in allowed_values:
            raise ValueError(
                "Invalid value for `to_u_type` ({0}), must be one of {1}"  # noqa: E501
                .format(to_u_type, allowed_values)
            )

        self._to_u_type = to_u_type

    @property
    def account_id(self):
        """Gets the account_id of this BankingScheduledPaymentTo.  # noqa: E501

        Present if toUType is set to accountId. Indicates that the payment is to another account that is accessible under the current consent  # noqa: E501

        :return: The account_id of this BankingScheduledPaymentTo.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankingScheduledPaymentTo.

        Present if toUType is set to accountId. Indicates that the payment is to another account that is accessible under the current consent  # noqa: E501

        :param account_id: The account_id of this BankingScheduledPaymentTo.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def payee_id(self):
        """Gets the payee_id of this BankingScheduledPaymentTo.  # noqa: E501

        Present if toUType is set to payeeId. Indicates that the payment is to registered payee that can be accessed using the payee end point. If the Bank Payees scope has not been consented to then a payeeId should not be provided and the full payee details should be provided instead  # noqa: E501

        :return: The payee_id of this BankingScheduledPaymentTo.  # noqa: E501
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this BankingScheduledPaymentTo.

        Present if toUType is set to payeeId. Indicates that the payment is to registered payee that can be accessed using the payee end point. If the Bank Payees scope has not been consented to then a payeeId should not be provided and the full payee details should be provided instead  # noqa: E501

        :param payee_id: The payee_id of this BankingScheduledPaymentTo.  # noqa: E501
        :type: str
        """

        self._payee_id = payee_id

    @property
    def domestic(self):
        """Gets the domestic of this BankingScheduledPaymentTo.  # noqa: E501


        :return: The domestic of this BankingScheduledPaymentTo.  # noqa: E501
        :rtype: BankingDomesticPayee
        """
        return self._domestic

    @domestic.setter
    def domestic(self, domestic):
        """Sets the domestic of this BankingScheduledPaymentTo.


        :param domestic: The domestic of this BankingScheduledPaymentTo.  # noqa: E501
        :type: BankingDomesticPayee
        """

        self._domestic = domestic

    @property
    def biller(self):
        """Gets the biller of this BankingScheduledPaymentTo.  # noqa: E501


        :return: The biller of this BankingScheduledPaymentTo.  # noqa: E501
        :rtype: BankingBillerPayee
        """
        return self._biller

    @biller.setter
    def biller(self, biller):
        """Sets the biller of this BankingScheduledPaymentTo.


        :param biller: The biller of this BankingScheduledPaymentTo.  # noqa: E501
        :type: BankingBillerPayee
        """

        self._biller = biller

    @property
    def international(self):
        """Gets the international of this BankingScheduledPaymentTo.  # noqa: E501


        :return: The international of this BankingScheduledPaymentTo.  # noqa: E501
        :rtype: BankingInternationalPayee
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this BankingScheduledPaymentTo.


        :param international: The international of this BankingScheduledPaymentTo.  # noqa: E501
        :type: BankingInternationalPayee
        """

        self._international = international

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingScheduledPaymentTo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingScheduledPaymentTo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
