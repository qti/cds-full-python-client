# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommonPhoneNumber(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_preferred': 'bool',
        'purpose': 'str',
        'country_code': 'str',
        'area_code': 'str',
        'number': 'str',
        'extension': 'str',
        'full_number': 'str'
    }

    attribute_map = {
        'is_preferred': 'isPreferred',
        'purpose': 'purpose',
        'country_code': 'countryCode',
        'area_code': 'areaCode',
        'number': 'number',
        'extension': 'extension',
        'full_number': 'fullNumber'
    }

    def __init__(self, is_preferred=None, purpose=None, country_code=None, area_code=None, number=None, extension=None, full_number=None):  # noqa: E501
        """CommonPhoneNumber - a model defined in Swagger"""  # noqa: E501

        self._is_preferred = None
        self._purpose = None
        self._country_code = None
        self._area_code = None
        self._number = None
        self._extension = None
        self._full_number = None
        self.discriminator = None

        if is_preferred is not None:
            self.is_preferred = is_preferred
        self.purpose = purpose
        if country_code is not None:
            self.country_code = country_code
        if area_code is not None:
            self.area_code = area_code
        self.number = number
        if extension is not None:
            self.extension = extension
        self.full_number = full_number

    @property
    def is_preferred(self):
        """Gets the is_preferred of this CommonPhoneNumber.  # noqa: E501

        May be true for one and only one entry to indicate the preferred phone number. Assumed to be 'false' if not present  # noqa: E501

        :return: The is_preferred of this CommonPhoneNumber.  # noqa: E501
        :rtype: bool
        """
        return self._is_preferred

    @is_preferred.setter
    def is_preferred(self, is_preferred):
        """Sets the is_preferred of this CommonPhoneNumber.

        May be true for one and only one entry to indicate the preferred phone number. Assumed to be 'false' if not present  # noqa: E501

        :param is_preferred: The is_preferred of this CommonPhoneNumber.  # noqa: E501
        :type: bool
        """

        self._is_preferred = is_preferred

    @property
    def purpose(self):
        """Gets the purpose of this CommonPhoneNumber.  # noqa: E501

        The purpose of the number as specified by the customer  # noqa: E501

        :return: The purpose of this CommonPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this CommonPhoneNumber.

        The purpose of the number as specified by the customer  # noqa: E501

        :param purpose: The purpose of this CommonPhoneNumber.  # noqa: E501
        :type: str
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")  # noqa: E501
        allowed_values = ["MOBILE", "HOME", "WORK", "OTHER", "INTERNATIONAL", "UNSPECIFIED"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"  # noqa: E501
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def country_code(self):
        """Gets the country_code of this CommonPhoneNumber.  # noqa: E501

        If absent, assumed to be Australia (+61). The + should be included  # noqa: E501

        :return: The country_code of this CommonPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CommonPhoneNumber.

        If absent, assumed to be Australia (+61). The + should be included  # noqa: E501

        :param country_code: The country_code of this CommonPhoneNumber.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def area_code(self):
        """Gets the area_code of this CommonPhoneNumber.  # noqa: E501

        Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.  # noqa: E501

        :return: The area_code of this CommonPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this CommonPhoneNumber.

        Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.  # noqa: E501

        :param area_code: The area_code of this CommonPhoneNumber.  # noqa: E501
        :type: str
        """

        self._area_code = area_code

    @property
    def number(self):
        """Gets the number of this CommonPhoneNumber.  # noqa: E501

        The actual phone number, with leading zeros as appropriate  # noqa: E501

        :return: The number of this CommonPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CommonPhoneNumber.

        The actual phone number, with leading zeros as appropriate  # noqa: E501

        :param number: The number of this CommonPhoneNumber.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def extension(self):
        """Gets the extension of this CommonPhoneNumber.  # noqa: E501

        An extension number (if applicable)  # noqa: E501

        :return: The extension of this CommonPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this CommonPhoneNumber.

        An extension number (if applicable)  # noqa: E501

        :param extension: The extension of this CommonPhoneNumber.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def full_number(self):
        """Gets the full_number of this CommonPhoneNumber.  # noqa: E501

        Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)  # noqa: E501

        :return: The full_number of this CommonPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._full_number

    @full_number.setter
    def full_number(self, full_number):
        """Sets the full_number of this CommonPhoneNumber.

        Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)  # noqa: E501

        :param full_number: The full_number of this CommonPhoneNumber.  # noqa: E501
        :type: str
        """
        if full_number is None:
            raise ValueError("Invalid value for `full_number`, must not be `None`")  # noqa: E501

        self._full_number = full_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPhoneNumber, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPhoneNumber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
