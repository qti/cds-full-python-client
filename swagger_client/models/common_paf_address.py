# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommonPAFAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dpid': 'str',
        'thoroughfare_number1': 'int',
        'thoroughfare_number1_suffix': 'str',
        'thoroughfare_number2': 'int',
        'thoroughfare_number2_suffix': 'str',
        'flat_unit_type': 'str',
        'flat_unit_number': 'str',
        'floor_level_type': 'str',
        'floor_level_number': 'str',
        'lot_number': 'str',
        'building_name1': 'str',
        'building_name2': 'str',
        'street_name': 'str',
        'street_type': 'str',
        'street_suffix': 'str',
        'postal_delivery_type': 'str',
        'postal_delivery_number': 'int',
        'postal_delivery_number_prefix': 'str',
        'postal_delivery_number_suffix': 'str',
        'locality_name': 'str',
        'postcode': 'str',
        'state': 'str'
    }

    attribute_map = {
        'dpid': 'dpid',
        'thoroughfare_number1': 'thoroughfareNumber1',
        'thoroughfare_number1_suffix': 'thoroughfareNumber1Suffix',
        'thoroughfare_number2': 'thoroughfareNumber2',
        'thoroughfare_number2_suffix': 'thoroughfareNumber2Suffix',
        'flat_unit_type': 'flatUnitType',
        'flat_unit_number': 'flatUnitNumber',
        'floor_level_type': 'floorLevelType',
        'floor_level_number': 'floorLevelNumber',
        'lot_number': 'lotNumber',
        'building_name1': 'buildingName1',
        'building_name2': 'buildingName2',
        'street_name': 'streetName',
        'street_type': 'streetType',
        'street_suffix': 'streetSuffix',
        'postal_delivery_type': 'postalDeliveryType',
        'postal_delivery_number': 'postalDeliveryNumber',
        'postal_delivery_number_prefix': 'postalDeliveryNumberPrefix',
        'postal_delivery_number_suffix': 'postalDeliveryNumberSuffix',
        'locality_name': 'localityName',
        'postcode': 'postcode',
        'state': 'state'
    }

    def __init__(self, dpid=None, thoroughfare_number1=None, thoroughfare_number1_suffix=None, thoroughfare_number2=None, thoroughfare_number2_suffix=None, flat_unit_type=None, flat_unit_number=None, floor_level_type=None, floor_level_number=None, lot_number=None, building_name1=None, building_name2=None, street_name=None, street_type=None, street_suffix=None, postal_delivery_type=None, postal_delivery_number=None, postal_delivery_number_prefix=None, postal_delivery_number_suffix=None, locality_name=None, postcode=None, state=None):  # noqa: E501
        """CommonPAFAddress - a model defined in Swagger"""  # noqa: E501

        self._dpid = None
        self._thoroughfare_number1 = None
        self._thoroughfare_number1_suffix = None
        self._thoroughfare_number2 = None
        self._thoroughfare_number2_suffix = None
        self._flat_unit_type = None
        self._flat_unit_number = None
        self._floor_level_type = None
        self._floor_level_number = None
        self._lot_number = None
        self._building_name1 = None
        self._building_name2 = None
        self._street_name = None
        self._street_type = None
        self._street_suffix = None
        self._postal_delivery_type = None
        self._postal_delivery_number = None
        self._postal_delivery_number_prefix = None
        self._postal_delivery_number_suffix = None
        self._locality_name = None
        self._postcode = None
        self._state = None
        self.discriminator = None

        if dpid is not None:
            self.dpid = dpid
        if thoroughfare_number1 is not None:
            self.thoroughfare_number1 = thoroughfare_number1
        if thoroughfare_number1_suffix is not None:
            self.thoroughfare_number1_suffix = thoroughfare_number1_suffix
        if thoroughfare_number2 is not None:
            self.thoroughfare_number2 = thoroughfare_number2
        if thoroughfare_number2_suffix is not None:
            self.thoroughfare_number2_suffix = thoroughfare_number2_suffix
        if flat_unit_type is not None:
            self.flat_unit_type = flat_unit_type
        if flat_unit_number is not None:
            self.flat_unit_number = flat_unit_number
        if floor_level_type is not None:
            self.floor_level_type = floor_level_type
        if floor_level_number is not None:
            self.floor_level_number = floor_level_number
        if lot_number is not None:
            self.lot_number = lot_number
        if building_name1 is not None:
            self.building_name1 = building_name1
        if building_name2 is not None:
            self.building_name2 = building_name2
        if street_name is not None:
            self.street_name = street_name
        if street_type is not None:
            self.street_type = street_type
        if street_suffix is not None:
            self.street_suffix = street_suffix
        if postal_delivery_type is not None:
            self.postal_delivery_type = postal_delivery_type
        if postal_delivery_number is not None:
            self.postal_delivery_number = postal_delivery_number
        if postal_delivery_number_prefix is not None:
            self.postal_delivery_number_prefix = postal_delivery_number_prefix
        if postal_delivery_number_suffix is not None:
            self.postal_delivery_number_suffix = postal_delivery_number_suffix
        self.locality_name = locality_name
        self.postcode = postcode
        self.state = state

    @property
    def dpid(self):
        """Gets the dpid of this CommonPAFAddress.  # noqa: E501

        Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier  # noqa: E501

        :return: The dpid of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._dpid

    @dpid.setter
    def dpid(self, dpid):
        """Sets the dpid of this CommonPAFAddress.

        Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier  # noqa: E501

        :param dpid: The dpid of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._dpid = dpid

    @property
    def thoroughfare_number1(self):
        """Gets the thoroughfare_number1 of this CommonPAFAddress.  # noqa: E501

        Thoroughfare number for a property (first number in a property ranged address)  # noqa: E501

        :return: The thoroughfare_number1 of this CommonPAFAddress.  # noqa: E501
        :rtype: int
        """
        return self._thoroughfare_number1

    @thoroughfare_number1.setter
    def thoroughfare_number1(self, thoroughfare_number1):
        """Sets the thoroughfare_number1 of this CommonPAFAddress.

        Thoroughfare number for a property (first number in a property ranged address)  # noqa: E501

        :param thoroughfare_number1: The thoroughfare_number1 of this CommonPAFAddress.  # noqa: E501
        :type: int
        """

        self._thoroughfare_number1 = thoroughfare_number1

    @property
    def thoroughfare_number1_suffix(self):
        """Gets the thoroughfare_number1_suffix of this CommonPAFAddress.  # noqa: E501

        Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated  # noqa: E501

        :return: The thoroughfare_number1_suffix of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._thoroughfare_number1_suffix

    @thoroughfare_number1_suffix.setter
    def thoroughfare_number1_suffix(self, thoroughfare_number1_suffix):
        """Sets the thoroughfare_number1_suffix of this CommonPAFAddress.

        Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated  # noqa: E501

        :param thoroughfare_number1_suffix: The thoroughfare_number1_suffix of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._thoroughfare_number1_suffix = thoroughfare_number1_suffix

    @property
    def thoroughfare_number2(self):
        """Gets the thoroughfare_number2 of this CommonPAFAddress.  # noqa: E501

        Second thoroughfare number (only used if the property has a ranged address eg 23-25)  # noqa: E501

        :return: The thoroughfare_number2 of this CommonPAFAddress.  # noqa: E501
        :rtype: int
        """
        return self._thoroughfare_number2

    @thoroughfare_number2.setter
    def thoroughfare_number2(self, thoroughfare_number2):
        """Sets the thoroughfare_number2 of this CommonPAFAddress.

        Second thoroughfare number (only used if the property has a ranged address eg 23-25)  # noqa: E501

        :param thoroughfare_number2: The thoroughfare_number2 of this CommonPAFAddress.  # noqa: E501
        :type: int
        """

        self._thoroughfare_number2 = thoroughfare_number2

    @property
    def thoroughfare_number2_suffix(self):
        """Gets the thoroughfare_number2_suffix of this CommonPAFAddress.  # noqa: E501

        Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated  # noqa: E501

        :return: The thoroughfare_number2_suffix of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._thoroughfare_number2_suffix

    @thoroughfare_number2_suffix.setter
    def thoroughfare_number2_suffix(self, thoroughfare_number2_suffix):
        """Sets the thoroughfare_number2_suffix of this CommonPAFAddress.

        Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated  # noqa: E501

        :param thoroughfare_number2_suffix: The thoroughfare_number2_suffix of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._thoroughfare_number2_suffix = thoroughfare_number2_suffix

    @property
    def flat_unit_type(self):
        """Gets the flat_unit_type of this CommonPAFAddress.  # noqa: E501

        Type of flat or unit for the address  # noqa: E501

        :return: The flat_unit_type of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._flat_unit_type

    @flat_unit_type.setter
    def flat_unit_type(self, flat_unit_type):
        """Sets the flat_unit_type of this CommonPAFAddress.

        Type of flat or unit for the address  # noqa: E501

        :param flat_unit_type: The flat_unit_type of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._flat_unit_type = flat_unit_type

    @property
    def flat_unit_number(self):
        """Gets the flat_unit_number of this CommonPAFAddress.  # noqa: E501

        Unit number (including suffix, if applicable)  # noqa: E501

        :return: The flat_unit_number of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._flat_unit_number

    @flat_unit_number.setter
    def flat_unit_number(self, flat_unit_number):
        """Sets the flat_unit_number of this CommonPAFAddress.

        Unit number (including suffix, if applicable)  # noqa: E501

        :param flat_unit_number: The flat_unit_number of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._flat_unit_number = flat_unit_number

    @property
    def floor_level_type(self):
        """Gets the floor_level_type of this CommonPAFAddress.  # noqa: E501

        Type of floor or level for the address  # noqa: E501

        :return: The floor_level_type of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._floor_level_type

    @floor_level_type.setter
    def floor_level_type(self, floor_level_type):
        """Sets the floor_level_type of this CommonPAFAddress.

        Type of floor or level for the address  # noqa: E501

        :param floor_level_type: The floor_level_type of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._floor_level_type = floor_level_type

    @property
    def floor_level_number(self):
        """Gets the floor_level_number of this CommonPAFAddress.  # noqa: E501

        Floor or level number (including alpha characters)  # noqa: E501

        :return: The floor_level_number of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._floor_level_number

    @floor_level_number.setter
    def floor_level_number(self, floor_level_number):
        """Sets the floor_level_number of this CommonPAFAddress.

        Floor or level number (including alpha characters)  # noqa: E501

        :param floor_level_number: The floor_level_number of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._floor_level_number = floor_level_number

    @property
    def lot_number(self):
        """Gets the lot_number of this CommonPAFAddress.  # noqa: E501

        Allotment number for the address  # noqa: E501

        :return: The lot_number of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._lot_number

    @lot_number.setter
    def lot_number(self, lot_number):
        """Sets the lot_number of this CommonPAFAddress.

        Allotment number for the address  # noqa: E501

        :param lot_number: The lot_number of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._lot_number = lot_number

    @property
    def building_name1(self):
        """Gets the building_name1 of this CommonPAFAddress.  # noqa: E501

        Building/Property name 1  # noqa: E501

        :return: The building_name1 of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._building_name1

    @building_name1.setter
    def building_name1(self, building_name1):
        """Sets the building_name1 of this CommonPAFAddress.

        Building/Property name 1  # noqa: E501

        :param building_name1: The building_name1 of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._building_name1 = building_name1

    @property
    def building_name2(self):
        """Gets the building_name2 of this CommonPAFAddress.  # noqa: E501

        Building/Property name 2  # noqa: E501

        :return: The building_name2 of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._building_name2

    @building_name2.setter
    def building_name2(self, building_name2):
        """Sets the building_name2 of this CommonPAFAddress.

        Building/Property name 2  # noqa: E501

        :param building_name2: The building_name2 of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._building_name2 = building_name2

    @property
    def street_name(self):
        """Gets the street_name of this CommonPAFAddress.  # noqa: E501

        The name of the street  # noqa: E501

        :return: The street_name of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this CommonPAFAddress.

        The name of the street  # noqa: E501

        :param street_name: The street_name of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def street_type(self):
        """Gets the street_type of this CommonPAFAddress.  # noqa: E501

        The street type. Valid enumeration defined by Australia Post PAF code file  # noqa: E501

        :return: The street_type of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this CommonPAFAddress.

        The street type. Valid enumeration defined by Australia Post PAF code file  # noqa: E501

        :param street_type: The street_type of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._street_type = street_type

    @property
    def street_suffix(self):
        """Gets the street_suffix of this CommonPAFAddress.  # noqa: E501

        The street type suffix. Valid enumeration defined by Australia Post PAF code file  # noqa: E501

        :return: The street_suffix of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_suffix

    @street_suffix.setter
    def street_suffix(self, street_suffix):
        """Sets the street_suffix of this CommonPAFAddress.

        The street type suffix. Valid enumeration defined by Australia Post PAF code file  # noqa: E501

        :param street_suffix: The street_suffix of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._street_suffix = street_suffix

    @property
    def postal_delivery_type(self):
        """Gets the postal_delivery_type of this CommonPAFAddress.  # noqa: E501

        Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file  # noqa: E501

        :return: The postal_delivery_type of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_delivery_type

    @postal_delivery_type.setter
    def postal_delivery_type(self, postal_delivery_type):
        """Sets the postal_delivery_type of this CommonPAFAddress.

        Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file  # noqa: E501

        :param postal_delivery_type: The postal_delivery_type of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._postal_delivery_type = postal_delivery_type

    @property
    def postal_delivery_number(self):
        """Gets the postal_delivery_number of this CommonPAFAddress.  # noqa: E501

        Postal delivery number if the address is a postal delivery type  # noqa: E501

        :return: The postal_delivery_number of this CommonPAFAddress.  # noqa: E501
        :rtype: int
        """
        return self._postal_delivery_number

    @postal_delivery_number.setter
    def postal_delivery_number(self, postal_delivery_number):
        """Sets the postal_delivery_number of this CommonPAFAddress.

        Postal delivery number if the address is a postal delivery type  # noqa: E501

        :param postal_delivery_number: The postal_delivery_number of this CommonPAFAddress.  # noqa: E501
        :type: int
        """

        self._postal_delivery_number = postal_delivery_number

    @property
    def postal_delivery_number_prefix(self):
        """Gets the postal_delivery_number_prefix of this CommonPAFAddress.  # noqa: E501

        Postal delivery number prefix related to the postal delivery number  # noqa: E501

        :return: The postal_delivery_number_prefix of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_delivery_number_prefix

    @postal_delivery_number_prefix.setter
    def postal_delivery_number_prefix(self, postal_delivery_number_prefix):
        """Sets the postal_delivery_number_prefix of this CommonPAFAddress.

        Postal delivery number prefix related to the postal delivery number  # noqa: E501

        :param postal_delivery_number_prefix: The postal_delivery_number_prefix of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._postal_delivery_number_prefix = postal_delivery_number_prefix

    @property
    def postal_delivery_number_suffix(self):
        """Gets the postal_delivery_number_suffix of this CommonPAFAddress.  # noqa: E501

        Postal delivery number suffix related to the postal delivery number  # noqa: E501

        :return: The postal_delivery_number_suffix of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_delivery_number_suffix

    @postal_delivery_number_suffix.setter
    def postal_delivery_number_suffix(self, postal_delivery_number_suffix):
        """Sets the postal_delivery_number_suffix of this CommonPAFAddress.

        Postal delivery number suffix related to the postal delivery number  # noqa: E501

        :param postal_delivery_number_suffix: The postal_delivery_number_suffix of this CommonPAFAddress.  # noqa: E501
        :type: str
        """

        self._postal_delivery_number_suffix = postal_delivery_number_suffix

    @property
    def locality_name(self):
        """Gets the locality_name of this CommonPAFAddress.  # noqa: E501

        Full name of locality  # noqa: E501

        :return: The locality_name of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._locality_name

    @locality_name.setter
    def locality_name(self, locality_name):
        """Sets the locality_name of this CommonPAFAddress.

        Full name of locality  # noqa: E501

        :param locality_name: The locality_name of this CommonPAFAddress.  # noqa: E501
        :type: str
        """
        if locality_name is None:
            raise ValueError("Invalid value for `locality_name`, must not be `None`")  # noqa: E501

        self._locality_name = locality_name

    @property
    def postcode(self):
        """Gets the postcode of this CommonPAFAddress.  # noqa: E501

        Postcode for the locality  # noqa: E501

        :return: The postcode of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this CommonPAFAddress.

        Postcode for the locality  # noqa: E501

        :param postcode: The postcode of this CommonPAFAddress.  # noqa: E501
        :type: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")  # noqa: E501

        self._postcode = postcode

    @property
    def state(self):
        """Gets the state of this CommonPAFAddress.  # noqa: E501

        State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT  # noqa: E501

        :return: The state of this CommonPAFAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CommonPAFAddress.

        State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT  # noqa: E501

        :param state: The state of this CommonPAFAddress.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPAFAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPAFAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
