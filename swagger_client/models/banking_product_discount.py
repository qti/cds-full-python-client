# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingProductDiscount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'discount_type': 'str',
        'amount': 'str',
        'balance_rate': 'str',
        'transaction_rate': 'str',
        'accrued_rate': 'str',
        'fee_rate': 'str',
        'additional_value': 'str',
        'additional_info': 'str',
        'additional_info_uri': 'str',
        'eligibility': 'list[BankingProductDiscountEligibility]'
    }

    attribute_map = {
        'description': 'description',
        'discount_type': 'discountType',
        'amount': 'amount',
        'balance_rate': 'balanceRate',
        'transaction_rate': 'transactionRate',
        'accrued_rate': 'accruedRate',
        'fee_rate': 'feeRate',
        'additional_value': 'additionalValue',
        'additional_info': 'additionalInfo',
        'additional_info_uri': 'additionalInfoUri',
        'eligibility': 'eligibility'
    }

    def __init__(self, description=None, discount_type=None, amount=None, balance_rate=None, transaction_rate=None, accrued_rate=None, fee_rate=None, additional_value=None, additional_info=None, additional_info_uri=None, eligibility=None):  # noqa: E501
        """BankingProductDiscount - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._discount_type = None
        self._amount = None
        self._balance_rate = None
        self._transaction_rate = None
        self._accrued_rate = None
        self._fee_rate = None
        self._additional_value = None
        self._additional_info = None
        self._additional_info_uri = None
        self._eligibility = None
        self.discriminator = None

        self.description = description
        self.discount_type = discount_type
        if amount is not None:
            self.amount = amount
        if balance_rate is not None:
            self.balance_rate = balance_rate
        if transaction_rate is not None:
            self.transaction_rate = transaction_rate
        if accrued_rate is not None:
            self.accrued_rate = accrued_rate
        if fee_rate is not None:
            self.fee_rate = fee_rate
        if additional_value is not None:
            self.additional_value = additional_value
        if additional_info is not None:
            self.additional_info = additional_info
        if additional_info_uri is not None:
            self.additional_info_uri = additional_info_uri
        if eligibility is not None:
            self.eligibility = eligibility

    @property
    def description(self):
        """Gets the description of this BankingProductDiscount.  # noqa: E501

        Description of the discount  # noqa: E501

        :return: The description of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankingProductDiscount.

        Description of the discount  # noqa: E501

        :param description: The description of this BankingProductDiscount.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def discount_type(self):
        """Gets the discount_type of this BankingProductDiscount.  # noqa: E501

        The type of discount. See the next section for an overview of valid values and their meaning  # noqa: E501

        :return: The discount_type of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this BankingProductDiscount.

        The type of discount. See the next section for an overview of valid values and their meaning  # noqa: E501

        :param discount_type: The discount_type of this BankingProductDiscount.  # noqa: E501
        :type: str
        """
        if discount_type is None:
            raise ValueError("Invalid value for `discount_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BALANCE", "DEPOSITS", "PAYMENTS", "FEE_CAP", "ELIGIBILITY_ONLY"]  # noqa: E501
        if discount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `discount_type` ({0}), must be one of {1}"  # noqa: E501
                .format(discount_type, allowed_values)
            )

        self._discount_type = discount_type

    @property
    def amount(self):
        """Gets the amount of this BankingProductDiscount.  # noqa: E501

        Value of the discount. When following properties include one of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory  # noqa: E501

        :return: The amount of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankingProductDiscount.

        Value of the discount. When following properties include one of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory  # noqa: E501

        :param amount: The amount of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def balance_rate(self):
        """Gets the balance_rate of this BankingProductDiscount.  # noqa: E501

        A discount rate calculated based on a proportion of the balance. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee  # noqa: E501

        :return: The balance_rate of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._balance_rate

    @balance_rate.setter
    def balance_rate(self, balance_rate):
        """Sets the balance_rate of this BankingProductDiscount.

        A discount rate calculated based on a proportion of the balance. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee  # noqa: E501

        :param balance_rate: The balance_rate of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._balance_rate = balance_rate

    @property
    def transaction_rate(self):
        """Gets the transaction_rate of this BankingProductDiscount.  # noqa: E501

        A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory  # noqa: E501

        :return: The transaction_rate of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._transaction_rate

    @transaction_rate.setter
    def transaction_rate(self, transaction_rate):
        """Sets the transaction_rate of this BankingProductDiscount.

        A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory  # noqa: E501

        :param transaction_rate: The transaction_rate of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._transaction_rate = transaction_rate

    @property
    def accrued_rate(self):
        """Gets the accrued_rate of this BankingProductDiscount.  # noqa: E501

        A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee  # noqa: E501

        :return: The accrued_rate of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._accrued_rate

    @accrued_rate.setter
    def accrued_rate(self, accrued_rate):
        """Sets the accrued_rate of this BankingProductDiscount.

        A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee  # noqa: E501

        :param accrued_rate: The accrued_rate of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._accrued_rate = accrued_rate

    @property
    def fee_rate(self):
        """Gets the fee_rate of this BankingProductDiscount.  # noqa: E501

        A discount rate calculated based on a proportion of the fee to which this discount is attached. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee  # noqa: E501

        :return: The fee_rate of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._fee_rate

    @fee_rate.setter
    def fee_rate(self, fee_rate):
        """Sets the fee_rate of this BankingProductDiscount.

        A discount rate calculated based on a proportion of the fee to which this discount is attached. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee  # noqa: E501

        :param fee_rate: The fee_rate of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._fee_rate = fee_rate

    @property
    def additional_value(self):
        """Gets the additional_value of this BankingProductDiscount.  # noqa: E501

        Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)  # noqa: E501

        :return: The additional_value of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._additional_value

    @additional_value.setter
    def additional_value(self, additional_value):
        """Sets the additional_value of this BankingProductDiscount.

        Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)  # noqa: E501

        :param additional_value: The additional_value of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._additional_value = additional_value

    @property
    def additional_info(self):
        """Gets the additional_info of this BankingProductDiscount.  # noqa: E501

        Display text providing more information on the discount  # noqa: E501

        :return: The additional_info of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this BankingProductDiscount.

        Display text providing more information on the discount  # noqa: E501

        :param additional_info: The additional_info of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def additional_info_uri(self):
        """Gets the additional_info_uri of this BankingProductDiscount.  # noqa: E501

        Link to a web page with more information on this discount  # noqa: E501

        :return: The additional_info_uri of this BankingProductDiscount.  # noqa: E501
        :rtype: str
        """
        return self._additional_info_uri

    @additional_info_uri.setter
    def additional_info_uri(self, additional_info_uri):
        """Sets the additional_info_uri of this BankingProductDiscount.

        Link to a web page with more information on this discount  # noqa: E501

        :param additional_info_uri: The additional_info_uri of this BankingProductDiscount.  # noqa: E501
        :type: str
        """

        self._additional_info_uri = additional_info_uri

    @property
    def eligibility(self):
        """Gets the eligibility of this BankingProductDiscount.  # noqa: E501

        Eligibility constraints that apply to this discount  # noqa: E501

        :return: The eligibility of this BankingProductDiscount.  # noqa: E501
        :rtype: list[BankingProductDiscountEligibility]
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this BankingProductDiscount.

        Eligibility constraints that apply to this discount  # noqa: E501

        :param eligibility: The eligibility of this BankingProductDiscount.  # noqa: E501
        :type: list[BankingProductDiscountEligibility]
        """

        self._eligibility = eligibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingProductDiscount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingProductDiscount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
