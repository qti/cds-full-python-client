# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingTransactionDetailExtendedData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payer': 'str',
        'payee': 'str',
        'extension_u_type': 'str',
        'x2p101_payload': 'BankingTransactionDetailExtendedDataX2p101Payload',
        'service': 'str'
    }

    attribute_map = {
        'payer': 'payer',
        'payee': 'payee',
        'extension_u_type': 'extensionUType',
        'x2p101_payload': 'x2p101Payload',
        'service': 'service'
    }

    def __init__(self, payer=None, payee=None, extension_u_type=None, x2p101_payload=None, service=None):  # noqa: E501
        """BankingTransactionDetailExtendedData - a model defined in Swagger"""  # noqa: E501

        self._payer = None
        self._payee = None
        self._extension_u_type = None
        self._x2p101_payload = None
        self._service = None
        self.discriminator = None

        if payer is not None:
            self.payer = payer
        if payee is not None:
            self.payee = payee
        if extension_u_type is not None:
            self.extension_u_type = extension_u_type
        if x2p101_payload is not None:
            self.x2p101_payload = x2p101_payload
        self.service = service

    @property
    def payer(self):
        """Gets the payer of this BankingTransactionDetailExtendedData.  # noqa: E501

        Label of the originating payer. Mandatory for inbound payment  # noqa: E501

        :return: The payer of this BankingTransactionDetailExtendedData.  # noqa: E501
        :rtype: str
        """
        return self._payer

    @payer.setter
    def payer(self, payer):
        """Sets the payer of this BankingTransactionDetailExtendedData.

        Label of the originating payer. Mandatory for inbound payment  # noqa: E501

        :param payer: The payer of this BankingTransactionDetailExtendedData.  # noqa: E501
        :type: str
        """

        self._payer = payer

    @property
    def payee(self):
        """Gets the payee of this BankingTransactionDetailExtendedData.  # noqa: E501

        Label of the target PayID.  Mandatory for an outbound payment. The name assigned to the BSB/Account Number or PayID (by the owner of the PayID)  # noqa: E501

        :return: The payee of this BankingTransactionDetailExtendedData.  # noqa: E501
        :rtype: str
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this BankingTransactionDetailExtendedData.

        Label of the target PayID.  Mandatory for an outbound payment. The name assigned to the BSB/Account Number or PayID (by the owner of the PayID)  # noqa: E501

        :param payee: The payee of this BankingTransactionDetailExtendedData.  # noqa: E501
        :type: str
        """

        self._payee = payee

    @property
    def extension_u_type(self):
        """Gets the extension_u_type of this BankingTransactionDetailExtendedData.  # noqa: E501

        Optional extended data provided specific to transaction originated via NPP  # noqa: E501

        :return: The extension_u_type of this BankingTransactionDetailExtendedData.  # noqa: E501
        :rtype: str
        """
        return self._extension_u_type

    @extension_u_type.setter
    def extension_u_type(self, extension_u_type):
        """Sets the extension_u_type of this BankingTransactionDetailExtendedData.

        Optional extended data provided specific to transaction originated via NPP  # noqa: E501

        :param extension_u_type: The extension_u_type of this BankingTransactionDetailExtendedData.  # noqa: E501
        :type: str
        """
        allowed_values = ["x2p101Payload"]  # noqa: E501
        if extension_u_type not in allowed_values:
            raise ValueError(
                "Invalid value for `extension_u_type` ({0}), must be one of {1}"  # noqa: E501
                .format(extension_u_type, allowed_values)
            )

        self._extension_u_type = extension_u_type

    @property
    def x2p101_payload(self):
        """Gets the x2p101_payload of this BankingTransactionDetailExtendedData.  # noqa: E501


        :return: The x2p101_payload of this BankingTransactionDetailExtendedData.  # noqa: E501
        :rtype: BankingTransactionDetailExtendedDataX2p101Payload
        """
        return self._x2p101_payload

    @x2p101_payload.setter
    def x2p101_payload(self, x2p101_payload):
        """Sets the x2p101_payload of this BankingTransactionDetailExtendedData.


        :param x2p101_payload: The x2p101_payload of this BankingTransactionDetailExtendedData.  # noqa: E501
        :type: BankingTransactionDetailExtendedDataX2p101Payload
        """

        self._x2p101_payload = x2p101_payload

    @property
    def service(self):
        """Gets the service of this BankingTransactionDetailExtendedData.  # noqa: E501

        Identifier of the applicable overlay service. Valid values are: X2P1.01  # noqa: E501

        :return: The service of this BankingTransactionDetailExtendedData.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this BankingTransactionDetailExtendedData.

        Identifier of the applicable overlay service. Valid values are: X2P1.01  # noqa: E501

        :param service: The service of this BankingTransactionDetailExtendedData.  # noqa: E501
        :type: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501
        allowed_values = ["X2P1.01"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"  # noqa: E501
                .format(service, allowed_values)
            )

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingTransactionDetailExtendedData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingTransactionDetailExtendedData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
