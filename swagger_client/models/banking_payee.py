# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingPayee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payee_id': 'str',
        'nickname': 'str',
        'description': 'str',
        'type': 'str',
        'creation_date': 'str'
    }

    attribute_map = {
        'payee_id': 'payeeId',
        'nickname': 'nickname',
        'description': 'description',
        'type': 'type',
        'creation_date': 'creationDate'
    }

    def __init__(self, payee_id=None, nickname=None, description=None, type=None, creation_date=None):  # noqa: E501
        """BankingPayee - a model defined in Swagger"""  # noqa: E501

        self._payee_id = None
        self._nickname = None
        self._description = None
        self._type = None
        self._creation_date = None
        self.discriminator = None

        self.payee_id = payee_id
        self.nickname = nickname
        if description is not None:
            self.description = description
        self.type = type
        if creation_date is not None:
            self.creation_date = creation_date

    @property
    def payee_id(self):
        """Gets the payee_id of this BankingPayee.  # noqa: E501

        ID of the payee adhering to the rules of ID permanence  # noqa: E501

        :return: The payee_id of this BankingPayee.  # noqa: E501
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this BankingPayee.

        ID of the payee adhering to the rules of ID permanence  # noqa: E501

        :param payee_id: The payee_id of this BankingPayee.  # noqa: E501
        :type: str
        """
        if payee_id is None:
            raise ValueError("Invalid value for `payee_id`, must not be `None`")  # noqa: E501

        self._payee_id = payee_id

    @property
    def nickname(self):
        """Gets the nickname of this BankingPayee.  # noqa: E501

        The short display name of the payee as provided by the customer  # noqa: E501

        :return: The nickname of this BankingPayee.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this BankingPayee.

        The short display name of the payee as provided by the customer  # noqa: E501

        :param nickname: The nickname of this BankingPayee.  # noqa: E501
        :type: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")  # noqa: E501

        self._nickname = nickname

    @property
    def description(self):
        """Gets the description of this BankingPayee.  # noqa: E501

        A description of the payee provided by the customer  # noqa: E501

        :return: The description of this BankingPayee.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankingPayee.

        A description of the payee provided by the customer  # noqa: E501

        :param description: The description of this BankingPayee.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this BankingPayee.  # noqa: E501

        The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY  # noqa: E501

        :return: The type of this BankingPayee.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankingPayee.

        The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY  # noqa: E501

        :param type: The type of this BankingPayee.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["DOMESTIC", "INTERNATIONAL", "BILLER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def creation_date(self):
        """Gets the creation_date of this BankingPayee.  # noqa: E501

        The date the payee was created by the customer  # noqa: E501

        :return: The creation_date of this BankingPayee.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this BankingPayee.

        The date the payee was created by the customer  # noqa: E501

        :param creation_date: The creation_date of this BankingPayee.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingPayee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingPayee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
