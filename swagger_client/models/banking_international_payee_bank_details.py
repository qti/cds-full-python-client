# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingInternationalPayeeBankDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'account_number': 'str',
        'bank_address': 'BankingInternationalPayeeBankDetailsBankAddress',
        'beneficiary_bank_bic': 'str',
        'fed_wire_number': 'str',
        'sort_code': 'str',
        'chip_number': 'str',
        'routing_number': 'str',
        'legal_entity_identifier': 'str'
    }

    attribute_map = {
        'country': 'country',
        'account_number': 'accountNumber',
        'bank_address': 'bankAddress',
        'beneficiary_bank_bic': 'beneficiaryBankBIC',
        'fed_wire_number': 'fedWireNumber',
        'sort_code': 'sortCode',
        'chip_number': 'chipNumber',
        'routing_number': 'routingNumber',
        'legal_entity_identifier': 'legalEntityIdentifier'
    }

    def __init__(self, country=None, account_number=None, bank_address=None, beneficiary_bank_bic=None, fed_wire_number=None, sort_code=None, chip_number=None, routing_number=None, legal_entity_identifier=None):  # noqa: E501
        """BankingInternationalPayeeBankDetails - a model defined in Swagger"""  # noqa: E501

        self._country = None
        self._account_number = None
        self._bank_address = None
        self._beneficiary_bank_bic = None
        self._fed_wire_number = None
        self._sort_code = None
        self._chip_number = None
        self._routing_number = None
        self._legal_entity_identifier = None
        self.discriminator = None

        self.country = country
        self.account_number = account_number
        if bank_address is not None:
            self.bank_address = bank_address
        if beneficiary_bank_bic is not None:
            self.beneficiary_bank_bic = beneficiary_bank_bic
        if fed_wire_number is not None:
            self.fed_wire_number = fed_wire_number
        if sort_code is not None:
            self.sort_code = sort_code
        if chip_number is not None:
            self.chip_number = chip_number
        if routing_number is not None:
            self.routing_number = routing_number
        if legal_entity_identifier is not None:
            self.legal_entity_identifier = legal_entity_identifier

    @property
    def country(self):
        """Gets the country of this BankingInternationalPayeeBankDetails.  # noqa: E501

        Country of the recipient institution. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code  # noqa: E501

        :return: The country of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankingInternationalPayeeBankDetails.

        Country of the recipient institution. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code  # noqa: E501

        :param country: The country of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def account_number(self):
        """Gets the account_number of this BankingInternationalPayeeBankDetails.  # noqa: E501

        Account Targeted for payment  # noqa: E501

        :return: The account_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankingInternationalPayeeBankDetails.

        Account Targeted for payment  # noqa: E501

        :param account_number: The account_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def bank_address(self):
        """Gets the bank_address of this BankingInternationalPayeeBankDetails.  # noqa: E501


        :return: The bank_address of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: BankingInternationalPayeeBankDetailsBankAddress
        """
        return self._bank_address

    @bank_address.setter
    def bank_address(self, bank_address):
        """Sets the bank_address of this BankingInternationalPayeeBankDetails.


        :param bank_address: The bank_address of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: BankingInternationalPayeeBankDetailsBankAddress
        """

        self._bank_address = bank_address

    @property
    def beneficiary_bank_bic(self):
        """Gets the beneficiary_bank_bic of this BankingInternationalPayeeBankDetails.  # noqa: E501

        Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)  # noqa: E501

        :return: The beneficiary_bank_bic of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_bank_bic

    @beneficiary_bank_bic.setter
    def beneficiary_bank_bic(self, beneficiary_bank_bic):
        """Sets the beneficiary_bank_bic of this BankingInternationalPayeeBankDetails.

        Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)  # noqa: E501

        :param beneficiary_bank_bic: The beneficiary_bank_bic of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """

        self._beneficiary_bank_bic = beneficiary_bank_bic

    @property
    def fed_wire_number(self):
        """Gets the fed_wire_number of this BankingInternationalPayeeBankDetails.  # noqa: E501

        Number for Fedwire payment (Federal Reserve Wire Network)  # noqa: E501

        :return: The fed_wire_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._fed_wire_number

    @fed_wire_number.setter
    def fed_wire_number(self, fed_wire_number):
        """Sets the fed_wire_number of this BankingInternationalPayeeBankDetails.

        Number for Fedwire payment (Federal Reserve Wire Network)  # noqa: E501

        :param fed_wire_number: The fed_wire_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """

        self._fed_wire_number = fed_wire_number

    @property
    def sort_code(self):
        """Gets the sort_code of this BankingInternationalPayeeBankDetails.  # noqa: E501

        Sort code used for account identification in some jurisdictions  # noqa: E501

        :return: The sort_code of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this BankingInternationalPayeeBankDetails.

        Sort code used for account identification in some jurisdictions  # noqa: E501

        :param sort_code: The sort_code of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """

        self._sort_code = sort_code

    @property
    def chip_number(self):
        """Gets the chip_number of this BankingInternationalPayeeBankDetails.  # noqa: E501

        Number for the Clearing House Interbank Payments System  # noqa: E501

        :return: The chip_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._chip_number

    @chip_number.setter
    def chip_number(self, chip_number):
        """Sets the chip_number of this BankingInternationalPayeeBankDetails.

        Number for the Clearing House Interbank Payments System  # noqa: E501

        :param chip_number: The chip_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """

        self._chip_number = chip_number

    @property
    def routing_number(self):
        """Gets the routing_number of this BankingInternationalPayeeBankDetails.  # noqa: E501

        International bank routing number  # noqa: E501

        :return: The routing_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this BankingInternationalPayeeBankDetails.

        International bank routing number  # noqa: E501

        :param routing_number: The routing_number of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """

        self._routing_number = routing_number

    @property
    def legal_entity_identifier(self):
        """Gets the legal_entity_identifier of this BankingInternationalPayeeBankDetails.  # noqa: E501

        The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)  # noqa: E501

        :return: The legal_entity_identifier of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._legal_entity_identifier

    @legal_entity_identifier.setter
    def legal_entity_identifier(self, legal_entity_identifier):
        """Sets the legal_entity_identifier of this BankingInternationalPayeeBankDetails.

        The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)  # noqa: E501

        :param legal_entity_identifier: The legal_entity_identifier of this BankingInternationalPayeeBankDetails.  # noqa: E501
        :type: str
        """

        self._legal_entity_identifier = legal_entity_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingInternationalPayeeBankDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingInternationalPayeeBankDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
