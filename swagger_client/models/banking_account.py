# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'creation_date': 'str',
        'display_name': 'str',
        'nickname': 'str',
        'open_status': 'str',
        'is_owned': 'bool',
        'masked_number': 'str',
        'product_category': 'BankingProductCategory',
        'product_name': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'creation_date': 'creationDate',
        'display_name': 'displayName',
        'nickname': 'nickname',
        'open_status': 'openStatus',
        'is_owned': 'isOwned',
        'masked_number': 'maskedNumber',
        'product_category': 'productCategory',
        'product_name': 'productName'
    }

    def __init__(self, account_id=None, creation_date=None, display_name=None, nickname=None, open_status='OPEN', is_owned=True, masked_number=None, product_category=None, product_name=None):  # noqa: E501
        """BankingAccount - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._creation_date = None
        self._display_name = None
        self._nickname = None
        self._open_status = None
        self._is_owned = None
        self._masked_number = None
        self._product_category = None
        self._product_name = None
        self.discriminator = None

        self.account_id = account_id
        if creation_date is not None:
            self.creation_date = creation_date
        self.display_name = display_name
        if nickname is not None:
            self.nickname = nickname
        if open_status is not None:
            self.open_status = open_status
        if is_owned is not None:
            self.is_owned = is_owned
        self.masked_number = masked_number
        self.product_category = product_category
        self.product_name = product_name

    @property
    def account_id(self):
        """Gets the account_id of this BankingAccount.  # noqa: E501

        A unique ID of the account adhering to the standards for ID permanence  # noqa: E501

        :return: The account_id of this BankingAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankingAccount.

        A unique ID of the account adhering to the standards for ID permanence  # noqa: E501

        :param account_id: The account_id of this BankingAccount.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def creation_date(self):
        """Gets the creation_date of this BankingAccount.  # noqa: E501

        Date that the account was created (if known)  # noqa: E501

        :return: The creation_date of this BankingAccount.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this BankingAccount.

        Date that the account was created (if known)  # noqa: E501

        :param creation_date: The creation_date of this BankingAccount.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def display_name(self):
        """Gets the display_name of this BankingAccount.  # noqa: E501

        The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type.  # noqa: E501

        :return: The display_name of this BankingAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BankingAccount.

        The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type.  # noqa: E501

        :param display_name: The display_name of this BankingAccount.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def nickname(self):
        """Gets the nickname of this BankingAccount.  # noqa: E501

        A customer supplied nick name for the account  # noqa: E501

        :return: The nickname of this BankingAccount.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this BankingAccount.

        A customer supplied nick name for the account  # noqa: E501

        :param nickname: The nickname of this BankingAccount.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def open_status(self):
        """Gets the open_status of this BankingAccount.  # noqa: E501

        Open or closed status for the account. If not present then OPEN is assumed  # noqa: E501

        :return: The open_status of this BankingAccount.  # noqa: E501
        :rtype: str
        """
        return self._open_status

    @open_status.setter
    def open_status(self, open_status):
        """Sets the open_status of this BankingAccount.

        Open or closed status for the account. If not present then OPEN is assumed  # noqa: E501

        :param open_status: The open_status of this BankingAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "CLOSED"]  # noqa: E501
        if open_status not in allowed_values:
            raise ValueError(
                "Invalid value for `open_status` ({0}), must be one of {1}"  # noqa: E501
                .format(open_status, allowed_values)
            )

        self._open_status = open_status

    @property
    def is_owned(self):
        """Gets the is_owned of this BankingAccount.  # noqa: E501

        Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed  # noqa: E501

        :return: The is_owned of this BankingAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_owned

    @is_owned.setter
    def is_owned(self, is_owned):
        """Sets the is_owned of this BankingAccount.

        Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed  # noqa: E501

        :param is_owned: The is_owned of this BankingAccount.  # noqa: E501
        :type: bool
        """

        self._is_owned = is_owned

    @property
    def masked_number(self):
        """Gets the masked_number of this BankingAccount.  # noqa: E501

        A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number  # noqa: E501

        :return: The masked_number of this BankingAccount.  # noqa: E501
        :rtype: str
        """
        return self._masked_number

    @masked_number.setter
    def masked_number(self, masked_number):
        """Sets the masked_number of this BankingAccount.

        A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number  # noqa: E501

        :param masked_number: The masked_number of this BankingAccount.  # noqa: E501
        :type: str
        """
        if masked_number is None:
            raise ValueError("Invalid value for `masked_number`, must not be `None`")  # noqa: E501

        self._masked_number = masked_number

    @property
    def product_category(self):
        """Gets the product_category of this BankingAccount.  # noqa: E501


        :return: The product_category of this BankingAccount.  # noqa: E501
        :rtype: BankingProductCategory
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this BankingAccount.


        :param product_category: The product_category of this BankingAccount.  # noqa: E501
        :type: BankingProductCategory
        """
        if product_category is None:
            raise ValueError("Invalid value for `product_category`, must not be `None`")  # noqa: E501

        self._product_category = product_category

    @property
    def product_name(self):
        """Gets the product_name of this BankingAccount.  # noqa: E501

        The unique identifier of the account as defined by the data holder (akin to model number for the account)  # noqa: E501

        :return: The product_name of this BankingAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this BankingAccount.

        The unique identifier of the account as defined by the data holder (akin to model number for the account)  # noqa: E501

        :param product_name: The product_name of this BankingAccount.  # noqa: E501
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
