# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingProductFee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'fee_type': 'str',
        'amount': 'str',
        'balance_rate': 'str',
        'transaction_rate': 'str',
        'accrued_rate': 'str',
        'accrual_frequency': 'str',
        'currency': 'str',
        'additional_value': 'str',
        'additional_info': 'str',
        'additional_info_uri': 'str',
        'discounts': 'list[BankingProductDiscount]'
    }

    attribute_map = {
        'name': 'name',
        'fee_type': 'feeType',
        'amount': 'amount',
        'balance_rate': 'balanceRate',
        'transaction_rate': 'transactionRate',
        'accrued_rate': 'accruedRate',
        'accrual_frequency': 'accrualFrequency',
        'currency': 'currency',
        'additional_value': 'additionalValue',
        'additional_info': 'additionalInfo',
        'additional_info_uri': 'additionalInfoUri',
        'discounts': 'discounts'
    }

    def __init__(self, name=None, fee_type=None, amount=None, balance_rate=None, transaction_rate=None, accrued_rate=None, accrual_frequency=None, currency=None, additional_value=None, additional_info=None, additional_info_uri=None, discounts=None):  # noqa: E501
        """BankingProductFee - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._fee_type = None
        self._amount = None
        self._balance_rate = None
        self._transaction_rate = None
        self._accrued_rate = None
        self._accrual_frequency = None
        self._currency = None
        self._additional_value = None
        self._additional_info = None
        self._additional_info_uri = None
        self._discounts = None
        self.discriminator = None

        self.name = name
        self.fee_type = fee_type
        if amount is not None:
            self.amount = amount
        if balance_rate is not None:
            self.balance_rate = balance_rate
        if transaction_rate is not None:
            self.transaction_rate = transaction_rate
        if accrued_rate is not None:
            self.accrued_rate = accrued_rate
        if accrual_frequency is not None:
            self.accrual_frequency = accrual_frequency
        if currency is not None:
            self.currency = currency
        if additional_value is not None:
            self.additional_value = additional_value
        if additional_info is not None:
            self.additional_info = additional_info
        if additional_info_uri is not None:
            self.additional_info_uri = additional_info_uri
        if discounts is not None:
            self.discounts = discounts

    @property
    def name(self):
        """Gets the name of this BankingProductFee.  # noqa: E501

        Name of the fee  # noqa: E501

        :return: The name of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankingProductFee.

        Name of the fee  # noqa: E501

        :param name: The name of this BankingProductFee.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def fee_type(self):
        """Gets the fee_type of this BankingProductFee.  # noqa: E501

        The type of fee  # noqa: E501

        :return: The fee_type of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this BankingProductFee.

        The type of fee  # noqa: E501

        :param fee_type: The fee_type of this BankingProductFee.  # noqa: E501
        :type: str
        """
        if fee_type is None:
            raise ValueError("Invalid value for `fee_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PERIODIC", "TRANSACTION", "WITHDRAWAL", "DEPOSIT", "PAYMENT", "PURCHASE", "EVENT", "UPFRONT", "EXIT"]  # noqa: E501
        if fee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(fee_type, allowed_values)
            )

        self._fee_type = fee_type

    @property
    def amount(self):
        """Gets the amount of this BankingProductFee.  # noqa: E501

        The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :return: The amount of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankingProductFee.

        The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :param amount: The amount of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def balance_rate(self):
        """Gets the balance_rate of this BankingProductFee.  # noqa: E501

        A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :return: The balance_rate of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._balance_rate

    @balance_rate.setter
    def balance_rate(self, balance_rate):
        """Sets the balance_rate of this BankingProductFee.

        A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :param balance_rate: The balance_rate of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._balance_rate = balance_rate

    @property
    def transaction_rate(self):
        """Gets the transaction_rate of this BankingProductFee.  # noqa: E501

        A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :return: The transaction_rate of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._transaction_rate

    @transaction_rate.setter
    def transaction_rate(self, transaction_rate):
        """Sets the transaction_rate of this BankingProductFee.

        A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :param transaction_rate: The transaction_rate of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._transaction_rate = transaction_rate

    @property
    def accrued_rate(self):
        """Gets the accrued_rate of this BankingProductFee.  # noqa: E501

        A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :return: The accrued_rate of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._accrued_rate

    @accrued_rate.setter
    def accrued_rate(self, accrued_rate):
        """Sets the accrued_rate of this BankingProductFee.

        A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory  # noqa: E501

        :param accrued_rate: The accrued_rate of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._accrued_rate = accrued_rate

    @property
    def accrual_frequency(self):
        """Gets the accrual_frequency of this BankingProductFee.  # noqa: E501

        The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)  # noqa: E501

        :return: The accrual_frequency of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._accrual_frequency

    @accrual_frequency.setter
    def accrual_frequency(self, accrual_frequency):
        """Sets the accrual_frequency of this BankingProductFee.

        The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)  # noqa: E501

        :param accrual_frequency: The accrual_frequency of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._accrual_frequency = accrual_frequency

    @property
    def currency(self):
        """Gets the currency of this BankingProductFee.  # noqa: E501

        The currency the fee will be charged in. Assumes AUD if absent  # noqa: E501

        :return: The currency of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankingProductFee.

        The currency the fee will be charged in. Assumes AUD if absent  # noqa: E501

        :param currency: The currency of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def additional_value(self):
        """Gets the additional_value of this BankingProductFee.  # noqa: E501

        Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)  # noqa: E501

        :return: The additional_value of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._additional_value

    @additional_value.setter
    def additional_value(self, additional_value):
        """Sets the additional_value of this BankingProductFee.

        Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)  # noqa: E501

        :param additional_value: The additional_value of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._additional_value = additional_value

    @property
    def additional_info(self):
        """Gets the additional_info of this BankingProductFee.  # noqa: E501

        Display text providing more information on the fee  # noqa: E501

        :return: The additional_info of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this BankingProductFee.

        Display text providing more information on the fee  # noqa: E501

        :param additional_info: The additional_info of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def additional_info_uri(self):
        """Gets the additional_info_uri of this BankingProductFee.  # noqa: E501

        Link to a web page with more information on this fee  # noqa: E501

        :return: The additional_info_uri of this BankingProductFee.  # noqa: E501
        :rtype: str
        """
        return self._additional_info_uri

    @additional_info_uri.setter
    def additional_info_uri(self, additional_info_uri):
        """Sets the additional_info_uri of this BankingProductFee.

        Link to a web page with more information on this fee  # noqa: E501

        :param additional_info_uri: The additional_info_uri of this BankingProductFee.  # noqa: E501
        :type: str
        """

        self._additional_info_uri = additional_info_uri

    @property
    def discounts(self):
        """Gets the discounts of this BankingProductFee.  # noqa: E501

        An optional list of discounts to this fee that may be available  # noqa: E501

        :return: The discounts of this BankingProductFee.  # noqa: E501
        :rtype: list[BankingProductDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this BankingProductFee.

        An optional list of discounts to this fee that may be available  # noqa: E501

        :param discounts: The discounts of this BankingProductFee.  # noqa: E501
        :type: list[BankingProductDiscount]
        """

        self._discounts = discounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingProductFee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingProductFee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
