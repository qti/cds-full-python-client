# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'transaction_id': 'str',
        'is_detail_available': 'bool',
        'type': 'str',
        'status': 'str',
        'description': 'str',
        'posting_date_time': 'str',
        'value_date_time': 'str',
        'execution_date_time': 'str',
        'amount': 'str',
        'currency': 'str',
        'reference': 'str',
        'merchant_name': 'str',
        'merchant_category_code': 'str',
        'biller_code': 'str',
        'biller_name': 'str',
        'crn': 'str',
        'apca_number': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'transaction_id': 'transactionId',
        'is_detail_available': 'isDetailAvailable',
        'type': 'type',
        'status': 'status',
        'description': 'description',
        'posting_date_time': 'postingDateTime',
        'value_date_time': 'valueDateTime',
        'execution_date_time': 'executionDateTime',
        'amount': 'amount',
        'currency': 'currency',
        'reference': 'reference',
        'merchant_name': 'merchantName',
        'merchant_category_code': 'merchantCategoryCode',
        'biller_code': 'billerCode',
        'biller_name': 'billerName',
        'crn': 'crn',
        'apca_number': 'apcaNumber'
    }

    def __init__(self, account_id=None, transaction_id=None, is_detail_available=None, type=None, status=None, description=None, posting_date_time=None, value_date_time=None, execution_date_time=None, amount=None, currency=None, reference=None, merchant_name=None, merchant_category_code=None, biller_code=None, biller_name=None, crn=None, apca_number=None):  # noqa: E501
        """BankingTransaction - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._transaction_id = None
        self._is_detail_available = None
        self._type = None
        self._status = None
        self._description = None
        self._posting_date_time = None
        self._value_date_time = None
        self._execution_date_time = None
        self._amount = None
        self._currency = None
        self._reference = None
        self._merchant_name = None
        self._merchant_category_code = None
        self._biller_code = None
        self._biller_name = None
        self._crn = None
        self._apca_number = None
        self.discriminator = None

        self.account_id = account_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        self.is_detail_available = is_detail_available
        self.type = type
        self.status = status
        self.description = description
        if posting_date_time is not None:
            self.posting_date_time = posting_date_time
        if value_date_time is not None:
            self.value_date_time = value_date_time
        if execution_date_time is not None:
            self.execution_date_time = execution_date_time
        self.amount = amount
        if currency is not None:
            self.currency = currency
        self.reference = reference
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if merchant_category_code is not None:
            self.merchant_category_code = merchant_category_code
        if biller_code is not None:
            self.biller_code = biller_code
        if biller_name is not None:
            self.biller_name = biller_name
        if crn is not None:
            self.crn = crn
        if apca_number is not None:
            self.apca_number = apca_number

    @property
    def account_id(self):
        """Gets the account_id of this BankingTransaction.  # noqa: E501

        ID of the account for which transactions are provided  # noqa: E501

        :return: The account_id of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankingTransaction.

        ID of the account for which transactions are provided  # noqa: E501

        :param account_id: The account_id of this BankingTransaction.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this BankingTransaction.  # noqa: E501

        A unique ID of the transaction adhering to the standards for ID permanence.  This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type  # noqa: E501

        :return: The transaction_id of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this BankingTransaction.

        A unique ID of the transaction adhering to the standards for ID permanence.  This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type  # noqa: E501

        :param transaction_id: The transaction_id of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def is_detail_available(self):
        """Gets the is_detail_available of this BankingTransaction.  # noqa: E501

        True if extended information is available using the transaction detail end point. False if extended data is not available  # noqa: E501

        :return: The is_detail_available of this BankingTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._is_detail_available

    @is_detail_available.setter
    def is_detail_available(self, is_detail_available):
        """Sets the is_detail_available of this BankingTransaction.

        True if extended information is available using the transaction detail end point. False if extended data is not available  # noqa: E501

        :param is_detail_available: The is_detail_available of this BankingTransaction.  # noqa: E501
        :type: bool
        """
        if is_detail_available is None:
            raise ValueError("Invalid value for `is_detail_available`, must not be `None`")  # noqa: E501

        self._is_detail_available = is_detail_available

    @property
    def type(self):
        """Gets the type of this BankingTransaction.  # noqa: E501

        The type of the transaction  # noqa: E501

        :return: The type of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankingTransaction.

        The type of the transaction  # noqa: E501

        :param type: The type of this BankingTransaction.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["FEE", "INTEREST_CHARGED", "INTEREST_PAID", "TRANSFER_OUTGOING", "TRANSFER_INCOMING", "PAYMENT", "DIRECT_DEBIT", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this BankingTransaction.  # noqa: E501

        Status of the transaction whether pending or posted. Note that there is currently no provision in the standards to guarantee the ability to correlate a pending transaction with an associated posted transaction  # noqa: E501

        :return: The status of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BankingTransaction.

        Status of the transaction whether pending or posted. Note that there is currently no provision in the standards to guarantee the ability to correlate a pending transaction with an associated posted transaction  # noqa: E501

        :param status: The status of this BankingTransaction.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "POSTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def description(self):
        """Gets the description of this BankingTransaction.  # noqa: E501

        The transaction description as applied by the financial institution  # noqa: E501

        :return: The description of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankingTransaction.

        The transaction description as applied by the financial institution  # noqa: E501

        :param description: The description of this BankingTransaction.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def posting_date_time(self):
        """Gets the posting_date_time of this BankingTransaction.  # noqa: E501

        The time the transaction was posted. This field is Mandatory if the transaction has status POSTED.  This is the time that appears on a standard statement  # noqa: E501

        :return: The posting_date_time of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._posting_date_time

    @posting_date_time.setter
    def posting_date_time(self, posting_date_time):
        """Sets the posting_date_time of this BankingTransaction.

        The time the transaction was posted. This field is Mandatory if the transaction has status POSTED.  This is the time that appears on a standard statement  # noqa: E501

        :param posting_date_time: The posting_date_time of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._posting_date_time = posting_date_time

    @property
    def value_date_time(self):
        """Gets the value_date_time of this BankingTransaction.  # noqa: E501

        Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry  # noqa: E501

        :return: The value_date_time of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._value_date_time

    @value_date_time.setter
    def value_date_time(self, value_date_time):
        """Sets the value_date_time of this BankingTransaction.

        Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry  # noqa: E501

        :param value_date_time: The value_date_time of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._value_date_time = value_date_time

    @property
    def execution_date_time(self):
        """Gets the execution_date_time of this BankingTransaction.  # noqa: E501

        The time the transaction was executed by the originating customer, if available  # noqa: E501

        :return: The execution_date_time of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._execution_date_time

    @execution_date_time.setter
    def execution_date_time(self, execution_date_time):
        """Sets the execution_date_time of this BankingTransaction.

        The time the transaction was executed by the originating customer, if available  # noqa: E501

        :param execution_date_time: The execution_date_time of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._execution_date_time = execution_date_time

    @property
    def amount(self):
        """Gets the amount of this BankingTransaction.  # noqa: E501

        The value of the transaction. Negative values mean money was outgoing from the account  # noqa: E501

        :return: The amount of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankingTransaction.

        The value of the transaction. Negative values mean money was outgoing from the account  # noqa: E501

        :param amount: The amount of this BankingTransaction.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this BankingTransaction.  # noqa: E501

        The currency for the transaction amount. AUD assumed if not present  # noqa: E501

        :return: The currency of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankingTransaction.

        The currency for the transaction amount. AUD assumed if not present  # noqa: E501

        :param currency: The currency of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def reference(self):
        """Gets the reference of this BankingTransaction.  # noqa: E501

        The reference for the transaction provided by the originating institution. Empty string if no data provided  # noqa: E501

        :return: The reference of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BankingTransaction.

        The reference for the transaction provided by the originating institution. Empty string if no data provided  # noqa: E501

        :param reference: The reference of this BankingTransaction.  # noqa: E501
        :type: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def merchant_name(self):
        """Gets the merchant_name of this BankingTransaction.  # noqa: E501

        Name of the merchant for an outgoing payment to a merchant  # noqa: E501

        :return: The merchant_name of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this BankingTransaction.

        Name of the merchant for an outgoing payment to a merchant  # noqa: E501

        :param merchant_name: The merchant_name of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this BankingTransaction.  # noqa: E501

        The merchant category code (or MCC) for an outgoing payment to a merchant  # noqa: E501

        :return: The merchant_category_code of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this BankingTransaction.

        The merchant category code (or MCC) for an outgoing payment to a merchant  # noqa: E501

        :param merchant_category_code: The merchant_category_code of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._merchant_category_code = merchant_category_code

    @property
    def biller_code(self):
        """Gets the biller_code of this BankingTransaction.  # noqa: E501

        BPAY Biller Code for the transaction (if available)  # noqa: E501

        :return: The biller_code of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._biller_code

    @biller_code.setter
    def biller_code(self, biller_code):
        """Sets the biller_code of this BankingTransaction.

        BPAY Biller Code for the transaction (if available)  # noqa: E501

        :param biller_code: The biller_code of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._biller_code = biller_code

    @property
    def biller_name(self):
        """Gets the biller_name of this BankingTransaction.  # noqa: E501

        Name of the BPAY biller for the transaction (if available)  # noqa: E501

        :return: The biller_name of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._biller_name

    @biller_name.setter
    def biller_name(self, biller_name):
        """Sets the biller_name of this BankingTransaction.

        Name of the BPAY biller for the transaction (if available)  # noqa: E501

        :param biller_name: The biller_name of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._biller_name = biller_name

    @property
    def crn(self):
        """Gets the crn of this BankingTransaction.  # noqa: E501

        BPAY CRN for the transaction (if available)  # noqa: E501

        :return: The crn of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._crn

    @crn.setter
    def crn(self, crn):
        """Sets the crn of this BankingTransaction.

        BPAY CRN for the transaction (if available)  # noqa: E501

        :param crn: The crn of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._crn = crn

    @property
    def apca_number(self):
        """Gets the apca_number of this BankingTransaction.  # noqa: E501

        6 Digit APCA number for the initiating institution  # noqa: E501

        :return: The apca_number of this BankingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._apca_number

    @apca_number.setter
    def apca_number(self, apca_number):
        """Sets the apca_number of this BankingTransaction.

        6 Digit APCA number for the initiating institution  # noqa: E501

        :param apca_number: The apca_number of this BankingTransaction.  # noqa: E501
        :type: str
        """

        self._apca_number = apca_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
