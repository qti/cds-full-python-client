# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommonPersonDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_time': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'middle_names': 'list[str]',
        'prefix': 'str',
        'suffix': 'str',
        'occupation_code': 'str',
        'phone_numbers': 'list[CommonPhoneNumber]',
        'email_addresses': 'list[CommonEmailAddress]',
        'physical_addresses': 'list[CommonPhysicalAddressWithPurpose]'
    }

    attribute_map = {
        'last_update_time': 'lastUpdateTime',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'middle_names': 'middleNames',
        'prefix': 'prefix',
        'suffix': 'suffix',
        'occupation_code': 'occupationCode',
        'phone_numbers': 'phoneNumbers',
        'email_addresses': 'emailAddresses',
        'physical_addresses': 'physicalAddresses'
    }

    def __init__(self, last_update_time=None, first_name=None, last_name=None, middle_names=None, prefix=None, suffix=None, occupation_code=None, phone_numbers=None, email_addresses=None, physical_addresses=None):  # noqa: E501
        """CommonPersonDetail - a model defined in Swagger"""  # noqa: E501

        self._last_update_time = None
        self._first_name = None
        self._last_name = None
        self._middle_names = None
        self._prefix = None
        self._suffix = None
        self._occupation_code = None
        self._phone_numbers = None
        self._email_addresses = None
        self._physical_addresses = None
        self.discriminator = None

        if last_update_time is not None:
            self.last_update_time = last_update_time
        if first_name is not None:
            self.first_name = first_name
        self.last_name = last_name
        self.middle_names = middle_names
        if prefix is not None:
            self.prefix = prefix
        if suffix is not None:
            self.suffix = suffix
        if occupation_code is not None:
            self.occupation_code = occupation_code
        self.phone_numbers = phone_numbers
        self.email_addresses = email_addresses
        self.physical_addresses = physical_addresses

    @property
    def last_update_time(self):
        """Gets the last_update_time of this CommonPersonDetail.  # noqa: E501

        The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data  # noqa: E501

        :return: The last_update_time of this CommonPersonDetail.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this CommonPersonDetail.

        The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data  # noqa: E501

        :param last_update_time: The last_update_time of this CommonPersonDetail.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    @property
    def first_name(self):
        """Gets the first_name of this CommonPersonDetail.  # noqa: E501

        For people with single names this field need not be present.  The single name should be in the lastName field  # noqa: E501

        :return: The first_name of this CommonPersonDetail.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CommonPersonDetail.

        For people with single names this field need not be present.  The single name should be in the lastName field  # noqa: E501

        :param first_name: The first_name of this CommonPersonDetail.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CommonPersonDetail.  # noqa: E501

        For people with single names the single name should be in this field  # noqa: E501

        :return: The last_name of this CommonPersonDetail.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CommonPersonDetail.

        For people with single names the single name should be in this field  # noqa: E501

        :param last_name: The last_name of this CommonPersonDetail.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def middle_names(self):
        """Gets the middle_names of this CommonPersonDetail.  # noqa: E501

        Field is mandatory but array may be empty  # noqa: E501

        :return: The middle_names of this CommonPersonDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._middle_names

    @middle_names.setter
    def middle_names(self, middle_names):
        """Sets the middle_names of this CommonPersonDetail.

        Field is mandatory but array may be empty  # noqa: E501

        :param middle_names: The middle_names of this CommonPersonDetail.  # noqa: E501
        :type: list[str]
        """
        if middle_names is None:
            raise ValueError("Invalid value for `middle_names`, must not be `None`")  # noqa: E501

        self._middle_names = middle_names

    @property
    def prefix(self):
        """Gets the prefix of this CommonPersonDetail.  # noqa: E501

        Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)  # noqa: E501

        :return: The prefix of this CommonPersonDetail.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this CommonPersonDetail.

        Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)  # noqa: E501

        :param prefix: The prefix of this CommonPersonDetail.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this CommonPersonDetail.  # noqa: E501

        Used for a trailing suffix to the name (e.g. Jr)  # noqa: E501

        :return: The suffix of this CommonPersonDetail.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CommonPersonDetail.

        Used for a trailing suffix to the name (e.g. Jr)  # noqa: E501

        :param suffix: The suffix of this CommonPersonDetail.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def occupation_code(self):
        """Gets the occupation_code of this CommonPersonDetail.  # noqa: E501

        Value is a valid [ANZSCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification.  # noqa: E501

        :return: The occupation_code of this CommonPersonDetail.  # noqa: E501
        :rtype: str
        """
        return self._occupation_code

    @occupation_code.setter
    def occupation_code(self, occupation_code):
        """Sets the occupation_code of this CommonPersonDetail.

        Value is a valid [ANZSCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification.  # noqa: E501

        :param occupation_code: The occupation_code of this CommonPersonDetail.  # noqa: E501
        :type: str
        """

        self._occupation_code = occupation_code

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this CommonPersonDetail.  # noqa: E501

        Array is mandatory but may be empty if no phone numbers are held  # noqa: E501

        :return: The phone_numbers of this CommonPersonDetail.  # noqa: E501
        :rtype: list[CommonPhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this CommonPersonDetail.

        Array is mandatory but may be empty if no phone numbers are held  # noqa: E501

        :param phone_numbers: The phone_numbers of this CommonPersonDetail.  # noqa: E501
        :type: list[CommonPhoneNumber]
        """
        if phone_numbers is None:
            raise ValueError("Invalid value for `phone_numbers`, must not be `None`")  # noqa: E501

        self._phone_numbers = phone_numbers

    @property
    def email_addresses(self):
        """Gets the email_addresses of this CommonPersonDetail.  # noqa: E501

        May be empty  # noqa: E501

        :return: The email_addresses of this CommonPersonDetail.  # noqa: E501
        :rtype: list[CommonEmailAddress]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this CommonPersonDetail.

        May be empty  # noqa: E501

        :param email_addresses: The email_addresses of this CommonPersonDetail.  # noqa: E501
        :type: list[CommonEmailAddress]
        """
        if email_addresses is None:
            raise ValueError("Invalid value for `email_addresses`, must not be `None`")  # noqa: E501

        self._email_addresses = email_addresses

    @property
    def physical_addresses(self):
        """Gets the physical_addresses of this CommonPersonDetail.  # noqa: E501

        Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail  # noqa: E501

        :return: The physical_addresses of this CommonPersonDetail.  # noqa: E501
        :rtype: list[CommonPhysicalAddressWithPurpose]
        """
        return self._physical_addresses

    @physical_addresses.setter
    def physical_addresses(self, physical_addresses):
        """Sets the physical_addresses of this CommonPersonDetail.

        Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail  # noqa: E501

        :param physical_addresses: The physical_addresses of this CommonPersonDetail.  # noqa: E501
        :type: list[CommonPhysicalAddressWithPurpose]
        """
        if physical_addresses is None:
            raise ValueError("Invalid value for `physical_addresses`, must not be `None`")  # noqa: E501

        self._physical_addresses = physical_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPersonDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPersonDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
