# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingDirectDebit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'authorised_entity': 'BankingAuthorisedEntity',
        'last_debit_date_time': 'str',
        'last_debit_amount': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'authorised_entity': 'authorisedEntity',
        'last_debit_date_time': 'lastDebitDateTime',
        'last_debit_amount': 'lastDebitAmount'
    }

    def __init__(self, account_id=None, authorised_entity=None, last_debit_date_time=None, last_debit_amount=None):  # noqa: E501
        """BankingDirectDebit - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._authorised_entity = None
        self._last_debit_date_time = None
        self._last_debit_amount = None
        self.discriminator = None

        self.account_id = account_id
        self.authorised_entity = authorised_entity
        if last_debit_date_time is not None:
            self.last_debit_date_time = last_debit_date_time
        if last_debit_amount is not None:
            self.last_debit_amount = last_debit_amount

    @property
    def account_id(self):
        """Gets the account_id of this BankingDirectDebit.  # noqa: E501

        A unique ID of the account adhering to the standards for ID permanence.  # noqa: E501

        :return: The account_id of this BankingDirectDebit.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankingDirectDebit.

        A unique ID of the account adhering to the standards for ID permanence.  # noqa: E501

        :param account_id: The account_id of this BankingDirectDebit.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def authorised_entity(self):
        """Gets the authorised_entity of this BankingDirectDebit.  # noqa: E501


        :return: The authorised_entity of this BankingDirectDebit.  # noqa: E501
        :rtype: BankingAuthorisedEntity
        """
        return self._authorised_entity

    @authorised_entity.setter
    def authorised_entity(self, authorised_entity):
        """Sets the authorised_entity of this BankingDirectDebit.


        :param authorised_entity: The authorised_entity of this BankingDirectDebit.  # noqa: E501
        :type: BankingAuthorisedEntity
        """
        if authorised_entity is None:
            raise ValueError("Invalid value for `authorised_entity`, must not be `None`")  # noqa: E501

        self._authorised_entity = authorised_entity

    @property
    def last_debit_date_time(self):
        """Gets the last_debit_date_time of this BankingDirectDebit.  # noqa: E501

        The date and time of the last debit executed under this authorisation  # noqa: E501

        :return: The last_debit_date_time of this BankingDirectDebit.  # noqa: E501
        :rtype: str
        """
        return self._last_debit_date_time

    @last_debit_date_time.setter
    def last_debit_date_time(self, last_debit_date_time):
        """Sets the last_debit_date_time of this BankingDirectDebit.

        The date and time of the last debit executed under this authorisation  # noqa: E501

        :param last_debit_date_time: The last_debit_date_time of this BankingDirectDebit.  # noqa: E501
        :type: str
        """

        self._last_debit_date_time = last_debit_date_time

    @property
    def last_debit_amount(self):
        """Gets the last_debit_amount of this BankingDirectDebit.  # noqa: E501

        The amount of the last debit executed under this authorisation  # noqa: E501

        :return: The last_debit_amount of this BankingDirectDebit.  # noqa: E501
        :rtype: str
        """
        return self._last_debit_amount

    @last_debit_amount.setter
    def last_debit_amount(self, last_debit_amount):
        """Sets the last_debit_amount of this BankingDirectDebit.

        The amount of the last debit executed under this authorisation  # noqa: E501

        :param last_debit_amount: The last_debit_amount of this BankingDirectDebit.  # noqa: E501
        :type: str
        """

        self._last_debit_amount = last_debit_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingDirectDebit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingDirectDebit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
