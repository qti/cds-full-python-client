# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingAccountDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'creation_date': 'str',
        'display_name': 'str',
        'nickname': 'str',
        'open_status': 'str',
        'is_owned': 'bool',
        'masked_number': 'str',
        'product_category': 'BankingProductCategory',
        'product_name': 'str',
        'bsb': 'str',
        'account_number': 'str',
        'bundle_name': 'str',
        'specific_account_u_type': 'str',
        'term_deposit': 'list[BankingTermDepositAccount]',
        'credit_card': 'BankingCreditCardAccount',
        'loan': 'BankingLoanAccount',
        'deposit_rate': 'str',
        'lending_rate': 'str',
        'deposit_rates': 'list[BankingProductDepositRate]',
        'lending_rates': 'list[BankingProductLendingRate]',
        'features': 'list[object]',
        'fees': 'list[BankingProductFee]',
        'addresses': 'list[CommonPhysicalAddress]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'creation_date': 'creationDate',
        'display_name': 'displayName',
        'nickname': 'nickname',
        'open_status': 'openStatus',
        'is_owned': 'isOwned',
        'masked_number': 'maskedNumber',
        'product_category': 'productCategory',
        'product_name': 'productName',
        'bsb': 'bsb',
        'account_number': 'accountNumber',
        'bundle_name': 'bundleName',
        'specific_account_u_type': 'specificAccountUType',
        'term_deposit': 'termDeposit',
        'credit_card': 'creditCard',
        'loan': 'loan',
        'deposit_rate': 'depositRate',
        'lending_rate': 'lendingRate',
        'deposit_rates': 'depositRates',
        'lending_rates': 'lendingRates',
        'features': 'features',
        'fees': 'fees',
        'addresses': 'addresses'
    }

    def __init__(self, account_id=None, creation_date=None, display_name=None, nickname=None, open_status='OPEN', is_owned=True, masked_number=None, product_category=None, product_name=None, bsb=None, account_number=None, bundle_name=None, specific_account_u_type=None, term_deposit=None, credit_card=None, loan=None, deposit_rate=None, lending_rate=None, deposit_rates=None, lending_rates=None, features=None, fees=None, addresses=None):  # noqa: E501
        """BankingAccountDetail - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._creation_date = None
        self._display_name = None
        self._nickname = None
        self._open_status = None
        self._is_owned = None
        self._masked_number = None
        self._product_category = None
        self._product_name = None
        self._bsb = None
        self._account_number = None
        self._bundle_name = None
        self._specific_account_u_type = None
        self._term_deposit = None
        self._credit_card = None
        self._loan = None
        self._deposit_rate = None
        self._lending_rate = None
        self._deposit_rates = None
        self._lending_rates = None
        self._features = None
        self._fees = None
        self._addresses = None
        self.discriminator = None

        self.account_id = account_id
        if creation_date is not None:
            self.creation_date = creation_date
        self.display_name = display_name
        if nickname is not None:
            self.nickname = nickname
        if open_status is not None:
            self.open_status = open_status
        if is_owned is not None:
            self.is_owned = is_owned
        self.masked_number = masked_number
        self.product_category = product_category
        self.product_name = product_name
        if bsb is not None:
            self.bsb = bsb
        if account_number is not None:
            self.account_number = account_number
        if bundle_name is not None:
            self.bundle_name = bundle_name
        if specific_account_u_type is not None:
            self.specific_account_u_type = specific_account_u_type
        if term_deposit is not None:
            self.term_deposit = term_deposit
        if credit_card is not None:
            self.credit_card = credit_card
        if loan is not None:
            self.loan = loan
        if deposit_rate is not None:
            self.deposit_rate = deposit_rate
        if lending_rate is not None:
            self.lending_rate = lending_rate
        if deposit_rates is not None:
            self.deposit_rates = deposit_rates
        if lending_rates is not None:
            self.lending_rates = lending_rates
        if features is not None:
            self.features = features
        if fees is not None:
            self.fees = fees
        if addresses is not None:
            self.addresses = addresses

    @property
    def account_id(self):
        """Gets the account_id of this BankingAccountDetail.  # noqa: E501

        A unique ID of the account adhering to the standards for ID permanence  # noqa: E501

        :return: The account_id of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankingAccountDetail.

        A unique ID of the account adhering to the standards for ID permanence  # noqa: E501

        :param account_id: The account_id of this BankingAccountDetail.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def creation_date(self):
        """Gets the creation_date of this BankingAccountDetail.  # noqa: E501

        Date that the account was created (if known)  # noqa: E501

        :return: The creation_date of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this BankingAccountDetail.

        Date that the account was created (if known)  # noqa: E501

        :param creation_date: The creation_date of this BankingAccountDetail.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def display_name(self):
        """Gets the display_name of this BankingAccountDetail.  # noqa: E501

        The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type.  # noqa: E501

        :return: The display_name of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BankingAccountDetail.

        The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type.  # noqa: E501

        :param display_name: The display_name of this BankingAccountDetail.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def nickname(self):
        """Gets the nickname of this BankingAccountDetail.  # noqa: E501

        A customer supplied nick name for the account  # noqa: E501

        :return: The nickname of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this BankingAccountDetail.

        A customer supplied nick name for the account  # noqa: E501

        :param nickname: The nickname of this BankingAccountDetail.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def open_status(self):
        """Gets the open_status of this BankingAccountDetail.  # noqa: E501

        Open or closed status for the account. If not present then OPEN is assumed  # noqa: E501

        :return: The open_status of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._open_status

    @open_status.setter
    def open_status(self, open_status):
        """Sets the open_status of this BankingAccountDetail.

        Open or closed status for the account. If not present then OPEN is assumed  # noqa: E501

        :param open_status: The open_status of this BankingAccountDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "CLOSED"]  # noqa: E501
        if open_status not in allowed_values:
            raise ValueError(
                "Invalid value for `open_status` ({0}), must be one of {1}"  # noqa: E501
                .format(open_status, allowed_values)
            )

        self._open_status = open_status

    @property
    def is_owned(self):
        """Gets the is_owned of this BankingAccountDetail.  # noqa: E501

        Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed  # noqa: E501

        :return: The is_owned of this BankingAccountDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_owned

    @is_owned.setter
    def is_owned(self, is_owned):
        """Sets the is_owned of this BankingAccountDetail.

        Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed  # noqa: E501

        :param is_owned: The is_owned of this BankingAccountDetail.  # noqa: E501
        :type: bool
        """

        self._is_owned = is_owned

    @property
    def masked_number(self):
        """Gets the masked_number of this BankingAccountDetail.  # noqa: E501

        A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number  # noqa: E501

        :return: The masked_number of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._masked_number

    @masked_number.setter
    def masked_number(self, masked_number):
        """Sets the masked_number of this BankingAccountDetail.

        A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number  # noqa: E501

        :param masked_number: The masked_number of this BankingAccountDetail.  # noqa: E501
        :type: str
        """
        if masked_number is None:
            raise ValueError("Invalid value for `masked_number`, must not be `None`")  # noqa: E501

        self._masked_number = masked_number

    @property
    def product_category(self):
        """Gets the product_category of this BankingAccountDetail.  # noqa: E501


        :return: The product_category of this BankingAccountDetail.  # noqa: E501
        :rtype: BankingProductCategory
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this BankingAccountDetail.


        :param product_category: The product_category of this BankingAccountDetail.  # noqa: E501
        :type: BankingProductCategory
        """
        if product_category is None:
            raise ValueError("Invalid value for `product_category`, must not be `None`")  # noqa: E501

        self._product_category = product_category

    @property
    def product_name(self):
        """Gets the product_name of this BankingAccountDetail.  # noqa: E501

        The unique identifier of the account as defined by the data holder (akin to model number for the account)  # noqa: E501

        :return: The product_name of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this BankingAccountDetail.

        The unique identifier of the account as defined by the data holder (akin to model number for the account)  # noqa: E501

        :param product_name: The product_name of this BankingAccountDetail.  # noqa: E501
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def bsb(self):
        """Gets the bsb of this BankingAccountDetail.  # noqa: E501

        The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces  # noqa: E501

        :return: The bsb of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._bsb

    @bsb.setter
    def bsb(self, bsb):
        """Sets the bsb of this BankingAccountDetail.

        The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces  # noqa: E501

        :param bsb: The bsb of this BankingAccountDetail.  # noqa: E501
        :type: str
        """

        self._bsb = bsb

    @property
    def account_number(self):
        """Gets the account_number of this BankingAccountDetail.  # noqa: E501

        The unmasked account number for the account. Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces  # noqa: E501

        :return: The account_number of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankingAccountDetail.

        The unmasked account number for the account. Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces  # noqa: E501

        :param account_number: The account_number of this BankingAccountDetail.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def bundle_name(self):
        """Gets the bundle_name of this BankingAccountDetail.  # noqa: E501

        Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer  # noqa: E501

        :return: The bundle_name of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._bundle_name

    @bundle_name.setter
    def bundle_name(self, bundle_name):
        """Sets the bundle_name of this BankingAccountDetail.

        Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer  # noqa: E501

        :param bundle_name: The bundle_name of this BankingAccountDetail.  # noqa: E501
        :type: str
        """

        self._bundle_name = bundle_name

    @property
    def specific_account_u_type(self):
        """Gets the specific_account_u_type of this BankingAccountDetail.  # noqa: E501

        The type of structure to present account specific fields.  # noqa: E501

        :return: The specific_account_u_type of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._specific_account_u_type

    @specific_account_u_type.setter
    def specific_account_u_type(self, specific_account_u_type):
        """Sets the specific_account_u_type of this BankingAccountDetail.

        The type of structure to present account specific fields.  # noqa: E501

        :param specific_account_u_type: The specific_account_u_type of this BankingAccountDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["termDeposit", "creditCard", "loan"]  # noqa: E501
        if specific_account_u_type not in allowed_values:
            raise ValueError(
                "Invalid value for `specific_account_u_type` ({0}), must be one of {1}"  # noqa: E501
                .format(specific_account_u_type, allowed_values)
            )

        self._specific_account_u_type = specific_account_u_type

    @property
    def term_deposit(self):
        """Gets the term_deposit of this BankingAccountDetail.  # noqa: E501


        :return: The term_deposit of this BankingAccountDetail.  # noqa: E501
        :rtype: list[BankingTermDepositAccount]
        """
        return self._term_deposit

    @term_deposit.setter
    def term_deposit(self, term_deposit):
        """Sets the term_deposit of this BankingAccountDetail.


        :param term_deposit: The term_deposit of this BankingAccountDetail.  # noqa: E501
        :type: list[BankingTermDepositAccount]
        """

        self._term_deposit = term_deposit

    @property
    def credit_card(self):
        """Gets the credit_card of this BankingAccountDetail.  # noqa: E501


        :return: The credit_card of this BankingAccountDetail.  # noqa: E501
        :rtype: BankingCreditCardAccount
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this BankingAccountDetail.


        :param credit_card: The credit_card of this BankingAccountDetail.  # noqa: E501
        :type: BankingCreditCardAccount
        """

        self._credit_card = credit_card

    @property
    def loan(self):
        """Gets the loan of this BankingAccountDetail.  # noqa: E501


        :return: The loan of this BankingAccountDetail.  # noqa: E501
        :rtype: BankingLoanAccount
        """
        return self._loan

    @loan.setter
    def loan(self, loan):
        """Sets the loan of this BankingAccountDetail.


        :param loan: The loan of this BankingAccountDetail.  # noqa: E501
        :type: BankingLoanAccount
        """

        self._loan = loan

    @property
    def deposit_rate(self):
        """Gets the deposit_rate of this BankingAccountDetail.  # noqa: E501

        current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call  # noqa: E501

        :return: The deposit_rate of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._deposit_rate

    @deposit_rate.setter
    def deposit_rate(self, deposit_rate):
        """Sets the deposit_rate of this BankingAccountDetail.

        current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call  # noqa: E501

        :param deposit_rate: The deposit_rate of this BankingAccountDetail.  # noqa: E501
        :type: str
        """

        self._deposit_rate = deposit_rate

    @property
    def lending_rate(self):
        """Gets the lending_rate of this BankingAccountDetail.  # noqa: E501

        The current rate to calculate interest payable being applied to lending balances as it stands at the time of the API call  # noqa: E501

        :return: The lending_rate of this BankingAccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._lending_rate

    @lending_rate.setter
    def lending_rate(self, lending_rate):
        """Sets the lending_rate of this BankingAccountDetail.

        The current rate to calculate interest payable being applied to lending balances as it stands at the time of the API call  # noqa: E501

        :param lending_rate: The lending_rate of this BankingAccountDetail.  # noqa: E501
        :type: str
        """

        self._lending_rate = lending_rate

    @property
    def deposit_rates(self):
        """Gets the deposit_rates of this BankingAccountDetail.  # noqa: E501

        Fully described deposit rates for this account based on the equivalent structure in Product Reference  # noqa: E501

        :return: The deposit_rates of this BankingAccountDetail.  # noqa: E501
        :rtype: list[BankingProductDepositRate]
        """
        return self._deposit_rates

    @deposit_rates.setter
    def deposit_rates(self, deposit_rates):
        """Sets the deposit_rates of this BankingAccountDetail.

        Fully described deposit rates for this account based on the equivalent structure in Product Reference  # noqa: E501

        :param deposit_rates: The deposit_rates of this BankingAccountDetail.  # noqa: E501
        :type: list[BankingProductDepositRate]
        """

        self._deposit_rates = deposit_rates

    @property
    def lending_rates(self):
        """Gets the lending_rates of this BankingAccountDetail.  # noqa: E501

        Fully described deposit rates for this account based on the equivalent structure in Product Reference  # noqa: E501

        :return: The lending_rates of this BankingAccountDetail.  # noqa: E501
        :rtype: list[BankingProductLendingRate]
        """
        return self._lending_rates

    @lending_rates.setter
    def lending_rates(self, lending_rates):
        """Sets the lending_rates of this BankingAccountDetail.

        Fully described deposit rates for this account based on the equivalent structure in Product Reference  # noqa: E501

        :param lending_rates: The lending_rates of this BankingAccountDetail.  # noqa: E501
        :type: list[BankingProductLendingRate]
        """

        self._lending_rates = lending_rates

    @property
    def features(self):
        """Gets the features of this BankingAccountDetail.  # noqa: E501

        Array of features of the account based on the equivalent structure in Product Reference with the following additional field  # noqa: E501

        :return: The features of this BankingAccountDetail.  # noqa: E501
        :rtype: list[object]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this BankingAccountDetail.

        Array of features of the account based on the equivalent structure in Product Reference with the following additional field  # noqa: E501

        :param features: The features of this BankingAccountDetail.  # noqa: E501
        :type: list[object]
        """

        self._features = features

    @property
    def fees(self):
        """Gets the fees of this BankingAccountDetail.  # noqa: E501

        Fees and charges applicable to the account based on the equivalent structure in Product Reference  # noqa: E501

        :return: The fees of this BankingAccountDetail.  # noqa: E501
        :rtype: list[BankingProductFee]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this BankingAccountDetail.

        Fees and charges applicable to the account based on the equivalent structure in Product Reference  # noqa: E501

        :param fees: The fees of this BankingAccountDetail.  # noqa: E501
        :type: list[BankingProductFee]
        """

        self._fees = fees

    @property
    def addresses(self):
        """Gets the addresses of this BankingAccountDetail.  # noqa: E501

        The addresses for the account to be used for correspondence  # noqa: E501

        :return: The addresses of this BankingAccountDetail.  # noqa: E501
        :rtype: list[CommonPhysicalAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this BankingAccountDetail.

        The addresses for the account to be used for correspondence  # noqa: E501

        :param addresses: The addresses of this BankingAccountDetail.  # noqa: E501
        :type: list[CommonPhysicalAddress]
        """

        self._addresses = addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingAccountDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingAccountDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
