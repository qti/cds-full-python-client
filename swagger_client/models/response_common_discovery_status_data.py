# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResponseCommonDiscoveryStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'explanation': 'str',
        'detection_time': 'str',
        'expected_resolution_time': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'status': 'status',
        'explanation': 'explanation',
        'detection_time': 'detectionTime',
        'expected_resolution_time': 'expectedResolutionTime',
        'update_time': 'updateTime'
    }

    def __init__(self, status=None, explanation=None, detection_time=None, expected_resolution_time=None, update_time=None):  # noqa: E501
        """ResponseCommonDiscoveryStatusData - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._explanation = None
        self._detection_time = None
        self._expected_resolution_time = None
        self._update_time = None
        self.discriminator = None

        self.status = status
        if explanation is not None:
            self.explanation = explanation
        if detection_time is not None:
            self.detection_time = detection_time
        if expected_resolution_time is not None:
            self.expected_resolution_time = expected_resolution_time
        self.update_time = update_time

    @property
    def status(self):
        """Gets the status of this ResponseCommonDiscoveryStatusData.  # noqa: E501

        Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)  # noqa: E501

        :return: The status of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseCommonDiscoveryStatusData.

        Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)  # noqa: E501

        :param status: The status of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["OK", "PARTIAL_FAILURE", "UNAVAILABLE", "SCHEDULED_OUTAGE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def explanation(self):
        """Gets the explanation of this ResponseCommonDiscoveryStatusData.  # noqa: E501

        Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK  # noqa: E501

        :return: The explanation of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this ResponseCommonDiscoveryStatusData.

        Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK  # noqa: E501

        :param explanation: The explanation of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    @property
    def detection_time(self):
        """Gets the detection_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501

        The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE  # noqa: E501

        :return: The detection_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :rtype: str
        """
        return self._detection_time

    @detection_time.setter
    def detection_time(self, detection_time):
        """Sets the detection_time of this ResponseCommonDiscoveryStatusData.

        The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE  # noqa: E501

        :param detection_time: The detection_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :type: str
        """

        self._detection_time = detection_time

    @property
    def expected_resolution_time(self):
        """Gets the expected_resolution_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501

        The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.  # noqa: E501

        :return: The expected_resolution_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :rtype: str
        """
        return self._expected_resolution_time

    @expected_resolution_time.setter
    def expected_resolution_time(self, expected_resolution_time):
        """Sets the expected_resolution_time of this ResponseCommonDiscoveryStatusData.

        The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.  # noqa: E501

        :param expected_resolution_time: The expected_resolution_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :type: str
        """

        self._expected_resolution_time = expected_resolution_time

    @property
    def update_time(self):
        """Gets the update_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501

        The date and time that this status was last updated by the Data Holder.  # noqa: E501

        :return: The update_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ResponseCommonDiscoveryStatusData.

        The date and time that this status was last updated by the Data Holder.  # noqa: E501

        :param update_time: The update_time of this ResponseCommonDiscoveryStatusData.  # noqa: E501
        :type: str
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseCommonDiscoveryStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseCommonDiscoveryStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
