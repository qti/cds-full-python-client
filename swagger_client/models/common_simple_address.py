# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommonSimpleAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mailing_name': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'postcode': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str'
    }

    attribute_map = {
        'mailing_name': 'mailingName',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'address_line3': 'addressLine3',
        'postcode': 'postcode',
        'city': 'city',
        'state': 'state',
        'country': 'country'
    }

    def __init__(self, mailing_name=None, address_line1=None, address_line2=None, address_line3=None, postcode=None, city=None, state=None, country='AUS'):  # noqa: E501
        """CommonSimpleAddress - a model defined in Swagger"""  # noqa: E501

        self._mailing_name = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._postcode = None
        self._city = None
        self._state = None
        self._country = None
        self.discriminator = None

        if mailing_name is not None:
            self.mailing_name = mailing_name
        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if postcode is not None:
            self.postcode = postcode
        self.city = city
        self.state = state
        if country is not None:
            self.country = country

    @property
    def mailing_name(self):
        """Gets the mailing_name of this CommonSimpleAddress.  # noqa: E501

        Name of the individual or business formatted for inclusion in an address used for physical mail  # noqa: E501

        :return: The mailing_name of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._mailing_name

    @mailing_name.setter
    def mailing_name(self, mailing_name):
        """Sets the mailing_name of this CommonSimpleAddress.

        Name of the individual or business formatted for inclusion in an address used for physical mail  # noqa: E501

        :param mailing_name: The mailing_name of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """

        self._mailing_name = mailing_name

    @property
    def address_line1(self):
        """Gets the address_line1 of this CommonSimpleAddress.  # noqa: E501

        First line of the standard address object  # noqa: E501

        :return: The address_line1 of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CommonSimpleAddress.

        First line of the standard address object  # noqa: E501

        :param address_line1: The address_line1 of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CommonSimpleAddress.  # noqa: E501

        Second line of the standard address object  # noqa: E501

        :return: The address_line2 of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CommonSimpleAddress.

        Second line of the standard address object  # noqa: E501

        :param address_line2: The address_line2 of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this CommonSimpleAddress.  # noqa: E501

        Third line of the standard address object  # noqa: E501

        :return: The address_line3 of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this CommonSimpleAddress.

        Third line of the standard address object  # noqa: E501

        :param address_line3: The address_line3 of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def postcode(self):
        """Gets the postcode of this CommonSimpleAddress.  # noqa: E501

        Mandatory for Australian addresses  # noqa: E501

        :return: The postcode of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this CommonSimpleAddress.

        Mandatory for Australian addresses  # noqa: E501

        :param postcode: The postcode of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def city(self):
        """Gets the city of this CommonSimpleAddress.  # noqa: E501

        Name of the city or locality  # noqa: E501

        :return: The city of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CommonSimpleAddress.

        Name of the city or locality  # noqa: E501

        :param city: The city of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this CommonSimpleAddress.  # noqa: E501

        Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT  # noqa: E501

        :return: The state of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CommonSimpleAddress.

        Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT  # noqa: E501

        :param state: The state of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def country(self):
        """Gets the country of this CommonSimpleAddress.  # noqa: E501

        A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.  # noqa: E501

        :return: The country of this CommonSimpleAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CommonSimpleAddress.

        A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.  # noqa: E501

        :param country: The country of this CommonSimpleAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonSimpleAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonSimpleAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
