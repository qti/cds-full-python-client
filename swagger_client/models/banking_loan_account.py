# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingLoanAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_start_date': 'str',
        'original_loan_amount': 'str',
        'original_loan_currency': 'str',
        'loan_end_date': 'str',
        'next_instalment_date': 'str',
        'min_instalment_amount': 'str',
        'min_instalment_currency': 'str',
        'max_redraw': 'str',
        'max_redraw_currency': 'str',
        'min_redraw': 'str',
        'min_redraw_currency': 'str',
        'offset_account_enabled': 'bool',
        'offset_account_ids': 'list[str]',
        'repayment_type': 'str',
        'repayment_frequency': 'str'
    }

    attribute_map = {
        'original_start_date': 'originalStartDate',
        'original_loan_amount': 'originalLoanAmount',
        'original_loan_currency': 'originalLoanCurrency',
        'loan_end_date': 'loanEndDate',
        'next_instalment_date': 'nextInstalmentDate',
        'min_instalment_amount': 'minInstalmentAmount',
        'min_instalment_currency': 'minInstalmentCurrency',
        'max_redraw': 'maxRedraw',
        'max_redraw_currency': 'maxRedrawCurrency',
        'min_redraw': 'minRedraw',
        'min_redraw_currency': 'minRedrawCurrency',
        'offset_account_enabled': 'offsetAccountEnabled',
        'offset_account_ids': 'offsetAccountIds',
        'repayment_type': 'repaymentType',
        'repayment_frequency': 'repaymentFrequency'
    }

    def __init__(self, original_start_date=None, original_loan_amount=None, original_loan_currency=None, loan_end_date=None, next_instalment_date=None, min_instalment_amount=None, min_instalment_currency=None, max_redraw=None, max_redraw_currency=None, min_redraw=None, min_redraw_currency=None, offset_account_enabled=None, offset_account_ids=None, repayment_type='PRINCIPAL_AND_INTEREST', repayment_frequency=None):  # noqa: E501
        """BankingLoanAccount - a model defined in Swagger"""  # noqa: E501

        self._original_start_date = None
        self._original_loan_amount = None
        self._original_loan_currency = None
        self._loan_end_date = None
        self._next_instalment_date = None
        self._min_instalment_amount = None
        self._min_instalment_currency = None
        self._max_redraw = None
        self._max_redraw_currency = None
        self._min_redraw = None
        self._min_redraw_currency = None
        self._offset_account_enabled = None
        self._offset_account_ids = None
        self._repayment_type = None
        self._repayment_frequency = None
        self.discriminator = None

        if original_start_date is not None:
            self.original_start_date = original_start_date
        if original_loan_amount is not None:
            self.original_loan_amount = original_loan_amount
        if original_loan_currency is not None:
            self.original_loan_currency = original_loan_currency
        self.loan_end_date = loan_end_date
        self.next_instalment_date = next_instalment_date
        if min_instalment_amount is not None:
            self.min_instalment_amount = min_instalment_amount
        if min_instalment_currency is not None:
            self.min_instalment_currency = min_instalment_currency
        if max_redraw is not None:
            self.max_redraw = max_redraw
        if max_redraw_currency is not None:
            self.max_redraw_currency = max_redraw_currency
        if min_redraw is not None:
            self.min_redraw = min_redraw
        if min_redraw_currency is not None:
            self.min_redraw_currency = min_redraw_currency
        if offset_account_enabled is not None:
            self.offset_account_enabled = offset_account_enabled
        if offset_account_ids is not None:
            self.offset_account_ids = offset_account_ids
        if repayment_type is not None:
            self.repayment_type = repayment_type
        self.repayment_frequency = repayment_frequency

    @property
    def original_start_date(self):
        """Gets the original_start_date of this BankingLoanAccount.  # noqa: E501

        Optional original start date for the loan  # noqa: E501

        :return: The original_start_date of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._original_start_date

    @original_start_date.setter
    def original_start_date(self, original_start_date):
        """Sets the original_start_date of this BankingLoanAccount.

        Optional original start date for the loan  # noqa: E501

        :param original_start_date: The original_start_date of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._original_start_date = original_start_date

    @property
    def original_loan_amount(self):
        """Gets the original_loan_amount of this BankingLoanAccount.  # noqa: E501

        Optional original loan value  # noqa: E501

        :return: The original_loan_amount of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._original_loan_amount

    @original_loan_amount.setter
    def original_loan_amount(self, original_loan_amount):
        """Sets the original_loan_amount of this BankingLoanAccount.

        Optional original loan value  # noqa: E501

        :param original_loan_amount: The original_loan_amount of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._original_loan_amount = original_loan_amount

    @property
    def original_loan_currency(self):
        """Gets the original_loan_currency of this BankingLoanAccount.  # noqa: E501

        If absent assumes AUD  # noqa: E501

        :return: The original_loan_currency of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._original_loan_currency

    @original_loan_currency.setter
    def original_loan_currency(self, original_loan_currency):
        """Sets the original_loan_currency of this BankingLoanAccount.

        If absent assumes AUD  # noqa: E501

        :param original_loan_currency: The original_loan_currency of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._original_loan_currency = original_loan_currency

    @property
    def loan_end_date(self):
        """Gets the loan_end_date of this BankingLoanAccount.  # noqa: E501

        Date that the loan is due to be repaid in full  # noqa: E501

        :return: The loan_end_date of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._loan_end_date

    @loan_end_date.setter
    def loan_end_date(self, loan_end_date):
        """Sets the loan_end_date of this BankingLoanAccount.

        Date that the loan is due to be repaid in full  # noqa: E501

        :param loan_end_date: The loan_end_date of this BankingLoanAccount.  # noqa: E501
        :type: str
        """
        if loan_end_date is None:
            raise ValueError("Invalid value for `loan_end_date`, must not be `None`")  # noqa: E501

        self._loan_end_date = loan_end_date

    @property
    def next_instalment_date(self):
        """Gets the next_instalment_date of this BankingLoanAccount.  # noqa: E501

        Next date that an instalment is required  # noqa: E501

        :return: The next_instalment_date of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._next_instalment_date

    @next_instalment_date.setter
    def next_instalment_date(self, next_instalment_date):
        """Sets the next_instalment_date of this BankingLoanAccount.

        Next date that an instalment is required  # noqa: E501

        :param next_instalment_date: The next_instalment_date of this BankingLoanAccount.  # noqa: E501
        :type: str
        """
        if next_instalment_date is None:
            raise ValueError("Invalid value for `next_instalment_date`, must not be `None`")  # noqa: E501

        self._next_instalment_date = next_instalment_date

    @property
    def min_instalment_amount(self):
        """Gets the min_instalment_amount of this BankingLoanAccount.  # noqa: E501

        Minimum amount of next instalment  # noqa: E501

        :return: The min_instalment_amount of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._min_instalment_amount

    @min_instalment_amount.setter
    def min_instalment_amount(self, min_instalment_amount):
        """Sets the min_instalment_amount of this BankingLoanAccount.

        Minimum amount of next instalment  # noqa: E501

        :param min_instalment_amount: The min_instalment_amount of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._min_instalment_amount = min_instalment_amount

    @property
    def min_instalment_currency(self):
        """Gets the min_instalment_currency of this BankingLoanAccount.  # noqa: E501

        If absent assumes AUD  # noqa: E501

        :return: The min_instalment_currency of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._min_instalment_currency

    @min_instalment_currency.setter
    def min_instalment_currency(self, min_instalment_currency):
        """Sets the min_instalment_currency of this BankingLoanAccount.

        If absent assumes AUD  # noqa: E501

        :param min_instalment_currency: The min_instalment_currency of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._min_instalment_currency = min_instalment_currency

    @property
    def max_redraw(self):
        """Gets the max_redraw of this BankingLoanAccount.  # noqa: E501

        Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account  # noqa: E501

        :return: The max_redraw of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._max_redraw

    @max_redraw.setter
    def max_redraw(self, max_redraw):
        """Sets the max_redraw of this BankingLoanAccount.

        Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account  # noqa: E501

        :param max_redraw: The max_redraw of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._max_redraw = max_redraw

    @property
    def max_redraw_currency(self):
        """Gets the max_redraw_currency of this BankingLoanAccount.  # noqa: E501

        If absent assumes AUD  # noqa: E501

        :return: The max_redraw_currency of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._max_redraw_currency

    @max_redraw_currency.setter
    def max_redraw_currency(self, max_redraw_currency):
        """Sets the max_redraw_currency of this BankingLoanAccount.

        If absent assumes AUD  # noqa: E501

        :param max_redraw_currency: The max_redraw_currency of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._max_redraw_currency = max_redraw_currency

    @property
    def min_redraw(self):
        """Gets the min_redraw of this BankingLoanAccount.  # noqa: E501

        Minimum redraw amount  # noqa: E501

        :return: The min_redraw of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._min_redraw

    @min_redraw.setter
    def min_redraw(self, min_redraw):
        """Sets the min_redraw of this BankingLoanAccount.

        Minimum redraw amount  # noqa: E501

        :param min_redraw: The min_redraw of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._min_redraw = min_redraw

    @property
    def min_redraw_currency(self):
        """Gets the min_redraw_currency of this BankingLoanAccount.  # noqa: E501

        If absent assumes AUD  # noqa: E501

        :return: The min_redraw_currency of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._min_redraw_currency

    @min_redraw_currency.setter
    def min_redraw_currency(self, min_redraw_currency):
        """Sets the min_redraw_currency of this BankingLoanAccount.

        If absent assumes AUD  # noqa: E501

        :param min_redraw_currency: The min_redraw_currency of this BankingLoanAccount.  # noqa: E501
        :type: str
        """

        self._min_redraw_currency = min_redraw_currency

    @property
    def offset_account_enabled(self):
        """Gets the offset_account_enabled of this BankingLoanAccount.  # noqa: E501

        Set to true if one or more offset accounts are configured for this loan account  # noqa: E501

        :return: The offset_account_enabled of this BankingLoanAccount.  # noqa: E501
        :rtype: bool
        """
        return self._offset_account_enabled

    @offset_account_enabled.setter
    def offset_account_enabled(self, offset_account_enabled):
        """Sets the offset_account_enabled of this BankingLoanAccount.

        Set to true if one or more offset accounts are configured for this loan account  # noqa: E501

        :param offset_account_enabled: The offset_account_enabled of this BankingLoanAccount.  # noqa: E501
        :type: bool
        """

        self._offset_account_enabled = offset_account_enabled

    @property
    def offset_account_ids(self):
        """Gets the offset_account_ids of this BankingLoanAccount.  # noqa: E501

        The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accessed under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation  # noqa: E501

        :return: The offset_account_ids of this BankingLoanAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._offset_account_ids

    @offset_account_ids.setter
    def offset_account_ids(self, offset_account_ids):
        """Sets the offset_account_ids of this BankingLoanAccount.

        The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accessed under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation  # noqa: E501

        :param offset_account_ids: The offset_account_ids of this BankingLoanAccount.  # noqa: E501
        :type: list[str]
        """

        self._offset_account_ids = offset_account_ids

    @property
    def repayment_type(self):
        """Gets the repayment_type of this BankingLoanAccount.  # noqa: E501

        Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST  # noqa: E501

        :return: The repayment_type of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._repayment_type

    @repayment_type.setter
    def repayment_type(self, repayment_type):
        """Sets the repayment_type of this BankingLoanAccount.

        Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST  # noqa: E501

        :param repayment_type: The repayment_type of this BankingLoanAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTEREST_ONLY", "PRINCIPAL_AND_INTEREST"]  # noqa: E501
        if repayment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repayment_type, allowed_values)
            )

        self._repayment_type = repayment_type

    @property
    def repayment_frequency(self):
        """Gets the repayment_frequency of this BankingLoanAccount.  # noqa: E501

        The expected or required repayment frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)  # noqa: E501

        :return: The repayment_frequency of this BankingLoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._repayment_frequency

    @repayment_frequency.setter
    def repayment_frequency(self, repayment_frequency):
        """Sets the repayment_frequency of this BankingLoanAccount.

        The expected or required repayment frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)  # noqa: E501

        :param repayment_frequency: The repayment_frequency of this BankingLoanAccount.  # noqa: E501
        :type: str
        """
        if repayment_frequency is None:
            raise ValueError("Invalid value for `repayment_frequency`, must not be `None`")  # noqa: E501

        self._repayment_frequency = repayment_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingLoanAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingLoanAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
