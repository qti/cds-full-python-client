# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommonOrganisationDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_time': 'str',
        'agent_first_name': 'str',
        'agent_last_name': 'str',
        'agent_role': 'str',
        'business_name': 'str',
        'legal_name': 'str',
        'short_name': 'str',
        'abn': 'str',
        'acn': 'str',
        'is_acnc_registered': 'bool',
        'industry_code': 'str',
        'organisation_type': 'str',
        'registered_country': 'str',
        'establishment_date': 'str',
        'physical_addresses': 'list[CommonPhysicalAddressWithPurpose]'
    }

    attribute_map = {
        'last_update_time': 'lastUpdateTime',
        'agent_first_name': 'agentFirstName',
        'agent_last_name': 'agentLastName',
        'agent_role': 'agentRole',
        'business_name': 'businessName',
        'legal_name': 'legalName',
        'short_name': 'shortName',
        'abn': 'abn',
        'acn': 'acn',
        'is_acnc_registered': 'isACNCRegistered',
        'industry_code': 'industryCode',
        'organisation_type': 'organisationType',
        'registered_country': 'registeredCountry',
        'establishment_date': 'establishmentDate',
        'physical_addresses': 'physicalAddresses'
    }

    def __init__(self, last_update_time=None, agent_first_name=None, agent_last_name=None, agent_role=None, business_name=None, legal_name=None, short_name=None, abn=None, acn=None, is_acnc_registered=None, industry_code=None, organisation_type=None, registered_country=None, establishment_date=None, physical_addresses=None):  # noqa: E501
        """CommonOrganisationDetail - a model defined in Swagger"""  # noqa: E501

        self._last_update_time = None
        self._agent_first_name = None
        self._agent_last_name = None
        self._agent_role = None
        self._business_name = None
        self._legal_name = None
        self._short_name = None
        self._abn = None
        self._acn = None
        self._is_acnc_registered = None
        self._industry_code = None
        self._organisation_type = None
        self._registered_country = None
        self._establishment_date = None
        self._physical_addresses = None
        self.discriminator = None

        if last_update_time is not None:
            self.last_update_time = last_update_time
        if agent_first_name is not None:
            self.agent_first_name = agent_first_name
        self.agent_last_name = agent_last_name
        self.agent_role = agent_role
        self.business_name = business_name
        if legal_name is not None:
            self.legal_name = legal_name
        if short_name is not None:
            self.short_name = short_name
        if abn is not None:
            self.abn = abn
        if acn is not None:
            self.acn = acn
        if is_acnc_registered is not None:
            self.is_acnc_registered = is_acnc_registered
        if industry_code is not None:
            self.industry_code = industry_code
        self.organisation_type = organisation_type
        if registered_country is not None:
            self.registered_country = registered_country
        if establishment_date is not None:
            self.establishment_date = establishment_date
        self.physical_addresses = physical_addresses

    @property
    def last_update_time(self):
        """Gets the last_update_time of this CommonOrganisationDetail.  # noqa: E501

        The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data  # noqa: E501

        :return: The last_update_time of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this CommonOrganisationDetail.

        The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data  # noqa: E501

        :param last_update_time: The last_update_time of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    @property
    def agent_first_name(self):
        """Gets the agent_first_name of this CommonOrganisationDetail.  # noqa: E501

        The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field  # noqa: E501

        :return: The agent_first_name of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._agent_first_name

    @agent_first_name.setter
    def agent_first_name(self, agent_first_name):
        """Sets the agent_first_name of this CommonOrganisationDetail.

        The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field  # noqa: E501

        :param agent_first_name: The agent_first_name of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._agent_first_name = agent_first_name

    @property
    def agent_last_name(self):
        """Gets the agent_last_name of this CommonOrganisationDetail.  # noqa: E501

        The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field  # noqa: E501

        :return: The agent_last_name of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._agent_last_name

    @agent_last_name.setter
    def agent_last_name(self, agent_last_name):
        """Sets the agent_last_name of this CommonOrganisationDetail.

        The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field  # noqa: E501

        :param agent_last_name: The agent_last_name of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """
        if agent_last_name is None:
            raise ValueError("Invalid value for `agent_last_name`, must not be `None`")  # noqa: E501

        self._agent_last_name = agent_last_name

    @property
    def agent_role(self):
        """Gets the agent_role of this CommonOrganisationDetail.  # noqa: E501

        The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known  # noqa: E501

        :return: The agent_role of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._agent_role

    @agent_role.setter
    def agent_role(self, agent_role):
        """Sets the agent_role of this CommonOrganisationDetail.

        The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known  # noqa: E501

        :param agent_role: The agent_role of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """
        if agent_role is None:
            raise ValueError("Invalid value for `agent_role`, must not be `None`")  # noqa: E501

        self._agent_role = agent_role

    @property
    def business_name(self):
        """Gets the business_name of this CommonOrganisationDetail.  # noqa: E501

        Name of the organisation  # noqa: E501

        :return: The business_name of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this CommonOrganisationDetail.

        Name of the organisation  # noqa: E501

        :param business_name: The business_name of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """
        if business_name is None:
            raise ValueError("Invalid value for `business_name`, must not be `None`")  # noqa: E501

        self._business_name = business_name

    @property
    def legal_name(self):
        """Gets the legal_name of this CommonOrganisationDetail.  # noqa: E501

        Legal name, if different to the business name  # noqa: E501

        :return: The legal_name of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this CommonOrganisationDetail.

        Legal name, if different to the business name  # noqa: E501

        :param legal_name: The legal_name of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def short_name(self):
        """Gets the short_name of this CommonOrganisationDetail.  # noqa: E501

        Short name used for communication, if different to the business name  # noqa: E501

        :return: The short_name of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this CommonOrganisationDetail.

        Short name used for communication, if different to the business name  # noqa: E501

        :param short_name: The short_name of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def abn(self):
        """Gets the abn of this CommonOrganisationDetail.  # noqa: E501

        Australian Business Number for the organisation  # noqa: E501

        :return: The abn of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._abn

    @abn.setter
    def abn(self, abn):
        """Sets the abn of this CommonOrganisationDetail.

        Australian Business Number for the organisation  # noqa: E501

        :param abn: The abn of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._abn = abn

    @property
    def acn(self):
        """Gets the acn of this CommonOrganisationDetail.  # noqa: E501

        Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type  # noqa: E501

        :return: The acn of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._acn

    @acn.setter
    def acn(self, acn):
        """Sets the acn of this CommonOrganisationDetail.

        Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type  # noqa: E501

        :param acn: The acn of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._acn = acn

    @property
    def is_acnc_registered(self):
        """Gets the is_acnc_registered of this CommonOrganisationDetail.  # noqa: E501

        True if registered with the ACNC.  False if not. Absent or null if not confirmed.  # noqa: E501

        :return: The is_acnc_registered of this CommonOrganisationDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_acnc_registered

    @is_acnc_registered.setter
    def is_acnc_registered(self, is_acnc_registered):
        """Sets the is_acnc_registered of this CommonOrganisationDetail.

        True if registered with the ACNC.  False if not. Absent or null if not confirmed.  # noqa: E501

        :param is_acnc_registered: The is_acnc_registered of this CommonOrganisationDetail.  # noqa: E501
        :type: bool
        """

        self._is_acnc_registered = is_acnc_registered

    @property
    def industry_code(self):
        """Gets the industry_code of this CommonOrganisationDetail.  # noqa: E501

        [ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation.  # noqa: E501

        :return: The industry_code of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._industry_code

    @industry_code.setter
    def industry_code(self, industry_code):
        """Sets the industry_code of this CommonOrganisationDetail.

        [ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation.  # noqa: E501

        :param industry_code: The industry_code of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._industry_code = industry_code

    @property
    def organisation_type(self):
        """Gets the organisation_type of this CommonOrganisationDetail.  # noqa: E501

        Legal organisation type  # noqa: E501

        :return: The organisation_type of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._organisation_type

    @organisation_type.setter
    def organisation_type(self, organisation_type):
        """Sets the organisation_type of this CommonOrganisationDetail.

        Legal organisation type  # noqa: E501

        :param organisation_type: The organisation_type of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """
        if organisation_type is None:
            raise ValueError("Invalid value for `organisation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["SOLE_TRADER", "COMPANY", "PARTNERSHIP", "TRUST", "GOVERNMENT_ENTITY", "OTHER"]  # noqa: E501
        if organisation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `organisation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(organisation_type, allowed_values)
            )

        self._organisation_type = organisation_type

    @property
    def registered_country(self):
        """Gets the registered_country of this CommonOrganisationDetail.  # noqa: E501

        Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent  # noqa: E501

        :return: The registered_country of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._registered_country

    @registered_country.setter
    def registered_country(self, registered_country):
        """Sets the registered_country of this CommonOrganisationDetail.

        Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent  # noqa: E501

        :param registered_country: The registered_country of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._registered_country = registered_country

    @property
    def establishment_date(self):
        """Gets the establishment_date of this CommonOrganisationDetail.  # noqa: E501

        The date the organisation described was established  # noqa: E501

        :return: The establishment_date of this CommonOrganisationDetail.  # noqa: E501
        :rtype: str
        """
        return self._establishment_date

    @establishment_date.setter
    def establishment_date(self, establishment_date):
        """Sets the establishment_date of this CommonOrganisationDetail.

        The date the organisation described was established  # noqa: E501

        :param establishment_date: The establishment_date of this CommonOrganisationDetail.  # noqa: E501
        :type: str
        """

        self._establishment_date = establishment_date

    @property
    def physical_addresses(self):
        """Gets the physical_addresses of this CommonOrganisationDetail.  # noqa: E501

        Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail  # noqa: E501

        :return: The physical_addresses of this CommonOrganisationDetail.  # noqa: E501
        :rtype: list[CommonPhysicalAddressWithPurpose]
        """
        return self._physical_addresses

    @physical_addresses.setter
    def physical_addresses(self, physical_addresses):
        """Sets the physical_addresses of this CommonOrganisationDetail.

        Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail  # noqa: E501

        :param physical_addresses: The physical_addresses of this CommonOrganisationDetail.  # noqa: E501
        :type: list[CommonPhysicalAddressWithPurpose]
        """
        if physical_addresses is None:
            raise ValueError("Invalid value for `physical_addresses`, must not be `None`")  # noqa: E501

        self._physical_addresses = physical_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonOrganisationDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonOrganisationDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
