# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResponseCommonCustomerDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_u_type': 'str',
        'person': 'CommonPersonDetail',
        'organisation': 'CommonOrganisationDetail'
    }

    attribute_map = {
        'customer_u_type': 'customerUType',
        'person': 'person',
        'organisation': 'organisation'
    }

    def __init__(self, customer_u_type=None, person=None, organisation=None):  # noqa: E501
        """ResponseCommonCustomerDetailData - a model defined in Swagger"""  # noqa: E501

        self._customer_u_type = None
        self._person = None
        self._organisation = None
        self.discriminator = None

        self.customer_u_type = customer_u_type
        if person is not None:
            self.person = person
        if organisation is not None:
            self.organisation = organisation

    @property
    def customer_u_type(self):
        """Gets the customer_u_type of this ResponseCommonCustomerDetailData.  # noqa: E501

        The type of customer object that is present  # noqa: E501

        :return: The customer_u_type of this ResponseCommonCustomerDetailData.  # noqa: E501
        :rtype: str
        """
        return self._customer_u_type

    @customer_u_type.setter
    def customer_u_type(self, customer_u_type):
        """Sets the customer_u_type of this ResponseCommonCustomerDetailData.

        The type of customer object that is present  # noqa: E501

        :param customer_u_type: The customer_u_type of this ResponseCommonCustomerDetailData.  # noqa: E501
        :type: str
        """
        if customer_u_type is None:
            raise ValueError("Invalid value for `customer_u_type`, must not be `None`")  # noqa: E501
        allowed_values = ["person", "organisation"]  # noqa: E501
        if customer_u_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_u_type` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_u_type, allowed_values)
            )

        self._customer_u_type = customer_u_type

    @property
    def person(self):
        """Gets the person of this ResponseCommonCustomerDetailData.  # noqa: E501


        :return: The person of this ResponseCommonCustomerDetailData.  # noqa: E501
        :rtype: CommonPersonDetail
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this ResponseCommonCustomerDetailData.


        :param person: The person of this ResponseCommonCustomerDetailData.  # noqa: E501
        :type: CommonPersonDetail
        """

        self._person = person

    @property
    def organisation(self):
        """Gets the organisation of this ResponseCommonCustomerDetailData.  # noqa: E501


        :return: The organisation of this ResponseCommonCustomerDetailData.  # noqa: E501
        :rtype: CommonOrganisationDetail
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this ResponseCommonCustomerDetailData.


        :param organisation: The organisation of this ResponseCommonCustomerDetailData.  # noqa: E501
        :type: CommonOrganisationDetail
        """

        self._organisation = organisation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseCommonCustomerDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseCommonCustomerDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
