# coding: utf-8

"""
    Consumer Data Standards

    API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cdr-data61@csiro.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingScheduledPaymentRecurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_payment_date': 'str',
        'recurrence_u_type': 'str',
        'once_off': 'BankingScheduledPaymentRecurrenceOnceOff',
        'interval_schedule': 'BankingScheduledPaymentRecurrenceIntervalSchedule',
        'last_week_day': 'BankingScheduledPaymentRecurrenceLastWeekday',
        'event_based': 'BankingScheduledPaymentRecurrenceEventBased'
    }

    attribute_map = {
        'next_payment_date': 'nextPaymentDate',
        'recurrence_u_type': 'recurrenceUType',
        'once_off': 'onceOff',
        'interval_schedule': 'intervalSchedule',
        'last_week_day': 'lastWeekDay',
        'event_based': 'eventBased'
    }

    def __init__(self, next_payment_date=None, recurrence_u_type=None, once_off=None, interval_schedule=None, last_week_day=None, event_based=None):  # noqa: E501
        """BankingScheduledPaymentRecurrence - a model defined in Swagger"""  # noqa: E501

        self._next_payment_date = None
        self._recurrence_u_type = None
        self._once_off = None
        self._interval_schedule = None
        self._last_week_day = None
        self._event_based = None
        self.discriminator = None

        if next_payment_date is not None:
            self.next_payment_date = next_payment_date
        self.recurrence_u_type = recurrence_u_type
        if once_off is not None:
            self.once_off = once_off
        if interval_schedule is not None:
            self.interval_schedule = interval_schedule
        if last_week_day is not None:
            self.last_week_day = last_week_day
        if event_based is not None:
            self.event_based = event_based

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this BankingScheduledPaymentRecurrence.  # noqa: E501

        The date of the next payment under the recurrence schedule  # noqa: E501

        :return: The next_payment_date of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this BankingScheduledPaymentRecurrence.

        The date of the next payment under the recurrence schedule  # noqa: E501

        :param next_payment_date: The next_payment_date of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :type: str
        """

        self._next_payment_date = next_payment_date

    @property
    def recurrence_u_type(self):
        """Gets the recurrence_u_type of this BankingScheduledPaymentRecurrence.  # noqa: E501

        The type of recurrence used to define the schedule  # noqa: E501

        :return: The recurrence_u_type of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_u_type

    @recurrence_u_type.setter
    def recurrence_u_type(self, recurrence_u_type):
        """Sets the recurrence_u_type of this BankingScheduledPaymentRecurrence.

        The type of recurrence used to define the schedule  # noqa: E501

        :param recurrence_u_type: The recurrence_u_type of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :type: str
        """
        if recurrence_u_type is None:
            raise ValueError("Invalid value for `recurrence_u_type`, must not be `None`")  # noqa: E501
        allowed_values = ["onceOff", "intervalSchedule", "lastWeekDay", "eventBased"]  # noqa: E501
        if recurrence_u_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence_u_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence_u_type, allowed_values)
            )

        self._recurrence_u_type = recurrence_u_type

    @property
    def once_off(self):
        """Gets the once_off of this BankingScheduledPaymentRecurrence.  # noqa: E501


        :return: The once_off of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :rtype: BankingScheduledPaymentRecurrenceOnceOff
        """
        return self._once_off

    @once_off.setter
    def once_off(self, once_off):
        """Sets the once_off of this BankingScheduledPaymentRecurrence.


        :param once_off: The once_off of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :type: BankingScheduledPaymentRecurrenceOnceOff
        """

        self._once_off = once_off

    @property
    def interval_schedule(self):
        """Gets the interval_schedule of this BankingScheduledPaymentRecurrence.  # noqa: E501


        :return: The interval_schedule of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :rtype: BankingScheduledPaymentRecurrenceIntervalSchedule
        """
        return self._interval_schedule

    @interval_schedule.setter
    def interval_schedule(self, interval_schedule):
        """Sets the interval_schedule of this BankingScheduledPaymentRecurrence.


        :param interval_schedule: The interval_schedule of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :type: BankingScheduledPaymentRecurrenceIntervalSchedule
        """

        self._interval_schedule = interval_schedule

    @property
    def last_week_day(self):
        """Gets the last_week_day of this BankingScheduledPaymentRecurrence.  # noqa: E501


        :return: The last_week_day of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :rtype: BankingScheduledPaymentRecurrenceLastWeekday
        """
        return self._last_week_day

    @last_week_day.setter
    def last_week_day(self, last_week_day):
        """Sets the last_week_day of this BankingScheduledPaymentRecurrence.


        :param last_week_day: The last_week_day of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :type: BankingScheduledPaymentRecurrenceLastWeekday
        """

        self._last_week_day = last_week_day

    @property
    def event_based(self):
        """Gets the event_based of this BankingScheduledPaymentRecurrence.  # noqa: E501


        :return: The event_based of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :rtype: BankingScheduledPaymentRecurrenceEventBased
        """
        return self._event_based

    @event_based.setter
    def event_based(self, event_based):
        """Sets the event_based of this BankingScheduledPaymentRecurrence.


        :param event_based: The event_based of this BankingScheduledPaymentRecurrence.  # noqa: E501
        :type: BankingScheduledPaymentRecurrenceEventBased
        """

        self._event_based = event_based

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingScheduledPaymentRecurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingScheduledPaymentRecurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
